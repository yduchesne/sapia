<sapia:page title="Ubik" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">

  <sapia:vmenu>
    <sapia:vsection name="Project Home" href="home.html"/>
    <sapia:vsection name="Wiki" href="http://code.google.com/p/sapia/wiki/Ubik"/>
    <sapia:vsection name="RMI" href="rmi.html">
      <sapia:vitem name="For Dummies" href="rmi.html#dummies" />
      <sapia:vitem name="Believing" href="rmi.html#believing" />
      <sapia:vitem name="Architecture" href="architecture.html" />
      <sapia:vitem name="Tutorial" href="tutorial.html" />    
    </sapia:vsection>
    
    <sapia:vsection name="Naming" href="naming.html">
      <sapia:vitem name="Robust Naming" href="naming.html#robust" />
      <sapia:vitem name="Usage" href="naming.html#usage" />
      <sapia:vitem name="Advanced" href="naming.html#advanced" />    
    </sapia:vsection>
    
    <sapia:vsection name="Transports">
      <sapia:vitem name="HTTP" href="transport/http.html" />
      <sapia:vitem name="Mplex" href="transport/mplex.html" />
	  <sapia:vitem name="Standard/TCP" href="transport/standard_tcp.html" />
      <sapia:vitem name="NIO/TCP" href="transport/nio_tcp.html" />
    </sapia:vsection>  
    
    <sapia:vsection name="Group Comm" href="group_communication.html">
      <sapia:vitem name="Event Channel" href="group_communication.html#eventchannel" />
      <sapia:vitem name="Protocol" href="group_communication.html#control_protocol" />    
      <sapia:vitem name="Avis" href="group_communication.html#using_avis" />
      <sapia:vitem name="TCP Unicast" href="group_communication.html#tcp_unicast" />
    </sapia:vsection>
    
    <sapia:vsection name="Javadoc" href="maven/api/index.html"/>
    <sapia:vsection name="Download" href="download.html"/>
    <sapia:vsection name="Mailing List" href="list.html"/>
  </sapia:vmenu>

  <sapia:sect1 title="Architecture">
    <sapia:section>
      <sapia:path name="home" href="../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="ubik" href="home.html" />
      <sapia:path name="rmi" href="rmi.html" />      
      <sapia:path name="architecture" />
    </sapia:section>

    <sapia:sect2 title="Overview" alias="overview">
    
      <p>The Ubik RMI application programming interface can be separated into 3
      conceptual layers:</p>
      
      <ul>
        <li>The <b>client API</b>, which is the one end-developers are the most concerned with.
        It involves: server creation/export/binding, implementation of client-side 
        and server-side interceptors, configuration of the different parameters of Ubik
        RMI's runtime environment.</li>
        
        <li>The <b>core</b>: this layer is irrelevant to end-developers, but is interesting
        to people who wish to know more about Ubik RMI's internals, either for curiosity, to
        bring improvements, or to extend the core for their own needs. This layer encompasses
        the distributed garbage collection mechanism, the creation of remote references, the
        command protocol used to between clients and servers - which among other things, is the way
        through which remote method invocations are transmitted, etc.
        </li>
        
        <li>The <b>transport</b> layer: this has been consciously decoupled from the core in
        order to allow remote method invocation over different "transport types", such as: raw socket
        (the default), HTTP, UDP, JMS and, who knows, Blue Tooth and the likes. The only transport type
        implemented as of now is raw socket - which is also the default one, as mentioned. This is designed
        in such a way as to isolate client and server endpoints from the core, so that the latter needs not
        concerning itself about the nitty-gritty details of the transport implementation it supercedes.</li>
      </ul>
      
    </sapia:sect2>

    <sapia:sect2 title="The Ubik RMI API" alias="ubikrmi">
      <p>This section explains the layers enumerated in the previous section, in order to provide a clear
      picture of Ubik RMI's mechanics as a whole.</p>
      
      <sapia:sect3 title="The Client API" alias="clientapi">
        <p>The client API can be defined as "what the application developer deals with". This layer is 
        pretty similar to its Java RMI counterpart - at least in appearance, especially with regards to 
        the programming model.</p>
        
        <sapia:sect4 title="The Hub" alias="hub">
          <p>The single-entry point into the API is the <sapia:class link="maven/api/org/sapia/ubik/rmi/server/Hub.html">Hub</sapia:class>
          class, that allows exporting objects as servers. This class is statically initialized upon its first
          invocation, where it creates all dependent objects that compose the Ubik RMI runtime. The 
          <sapia:command>Hub</sapia:command> is a singleton, meaning that there is only a single instance of
          it per JVM (or, rather, per classloader).</p>
          
          <p>Upon exiting, your application should call <sapia:command>Hub.shutdown()</sapia:command> to make sure all resources 
          (network connections, etc.) held by the Ubik runtime are released.
          </p>
        </sapia:sect4>
        
        <sapia:sect4 title="Server vs Client" alias="serverclient">
        
          <p>For the developer, implementing a distributed application involves creating clients and servers. 
          Very often, these roles are intertwined: a server can be the client of another server.</p>
               
          <p>When an object is exported as a server through the <sapia:command>Hub</sapia:command>, a physical 
          server is created, of which there is also a single instance per VM, <b>per transport type</b>(see the
          <a href="#transport">Transport</a> section for more details). This server object implements the 
          <sapia:class link="maven/api/org/sapia/ubik/rmi/server/Server.html">Server</sapia:class> interface. 
          The instance is kept as part of the 
          <sapia:class link="maven/api/org/sapia/ubik/rmi/server/ServerTable.html">ServerTable</sapia:class> and 
          is in charge of receiving the remote method calls and relaying them internally so that they can be dispatched 
          to the appropriate remote objects. Once an object has been exported, all subsequent remote objects will receive 
          their method calls through the same server.</p>
          
        </sapia:sect4>
      </sapia:sect3>
      
      <sapia:sect3 title="The Core" alias="core">
        <p>The end-developer needs not concerning him/herself with the Ubik RMI core; yet, a superficial 
        understanding of it can be useful.</p>
        
        <sapia:sect4 title="Remote References" alias="remoterefs">
          <p>As was explained in the previous section, once the application exports an object, a server is
          internally started and thereafter processes all incoming requests. When an object that is an instance of
          <sapia:class>java.rmi.Remote</sapia:class> is returned as part of a remote method invocation, a stub is 
          dynamically generated for it, which is sent (in place of the object itself) to the client. The remote
          object is kept internally in an object table; the stub encapsulates the 
          <b>object identifier</b> under which the object is kept in that table - which is necessary to target
          remote method calls to the appropriate remote object.</p>
          
          <p>For each client that performs a remote method invocation and receives a stub in return, the Ubik 
          RMI runtime keeps a <b>reference count</b>, which is incremented each time a stub for a given remote
          object is returned. The reference count is tracked on a per-client basis, which is necessary to properly implement 
          distributed gargbage collection (DGC).</p>
        </sapia:sect4>
        
        <sapia:sect4 title="Distributed Garbage Collection" alias="dgc">
          <p>When remote references are created on the server-side, they are locally registered with the server-side garbage 
          collector (implemented as the <sapia:class link="maven/api/org/sapia/ubik/rmi/server/gc/ServerGC.html">ServerGC</sapia:class>) 
          that keeps the reference count for each remote object. As was mentioned, in place of the latter, a stub is sent to 
          the client; upon the stub's arrival at the client, it registers itself with the client-side GC - modeled
          by the <sapia:class link="maven/api/org/sapia/ubik/rmi/server/gc/ClientGC.html">ClientGC</sapia:class>.</p>
          
          <p>Together, the <sapia:class>ClientGC</sapia:class> and <sapia:class>ServerGC</sapia:class> indirectly interact to
          implement the overall DGC algorithm. The latter works as follows:
            <ul>
              <li>When the client GC registers a stub, it in fact wraps it in a soft reference and keeps the latter in an 
              internal table - associated with the corresponding object identifier. It checks at a predefined interval the thus 
              created soft references, making sure that the wrapped references are not null; if so, its means that the client no
              longer has references on the stubs and must synchronize its state with the server - meaning that the reference
              counts at the latter have to be decremented - for each of the dereferenced objects.</li>
              
              <li>At a predefined interval then, the client GC will notify the server GC about the object identifiers for which 
              the corresponding reference count should be decremented. When receiving such a notification from the client, 
              the server GC will decrement the total reference count for the remote object; it does so by substracting the
              count that is kept on a per-client basis from the total reference count. If the latter reaches zero, it means 
              that no client has references on the remote object anymore. When this occurs, the remote object is removed 
              from the object table - and eventually garbage collected.</li>
            </ul>
          </p>
          
          <p>As part of the DGC, client are responsible for signaling their presence at a regular interval to the server. 
          The server GC keeps track of all "current" clients, and will unregister them from its internal table if it
          detects that a client has not "pinged" for a predefined amount of time - decrementing the total reference counts 
          accordingly. This is necessary since eventually, if a client stops, the reference counts will be decremented 
          appropriately on the server-side, and the server's memory will be freed. Not taking this precaution would
          inevitably introduce distributed memory leaks.</p>
        
        </sapia:sect4>
        
        <sapia:sect4 title="The Command Pattern at Work" alias="command">
          <p>The "logic" protocol between Ubik RMI clients and servers is implemented with the <b>Command</b> 
          design pattern. Command objects are sent from clients to servers, and executed at the latter. Many commands 
          have been implemented, including the one that carries remote method calls over the wire. Eventually, developers 
          can benefit from this pattern by implementing their own commands, thus working one level "under" the usual one.</p>
        </sapia:sect4>
        
      </sapia:sect3>
      
      <sapia:sect3 title="The Transport Layer" alias="transport">
        <p>The transport layer as been cleanly separated from the Ubik RMI core in order to allow for plugging
        different transport implementations. The <sapia:class link="api/org/ubik/rmi/server/transport/TransportManager.html">
        TransportManager</sapia:class> (in the <sapia:class>org.ubik.rmi.server.transport</sapia:class> package) is the 
        entry point into the transport layer. It allows for the registration of 
        <sapia:class link="maven/api/org/sapia/ubik/rmi/server/transport/TransportProvider.html">TransportProvider</sapia:class>s which 
        handle the low-level communication issues. The default transport provider is implemented by the 
        <sapia:class link="maven/api/org/sapia/ubik/rmi/server/transport/socket/MultiplexSocketTransportProvider.html">MultiplexSocketTransportProvider</sapia:class> 
        class, which, as its name implies, handles communication over sockets. It is also the default transport provider of Ubik RMI.</p>
        
        <p>As was mentioned previously, a Ubik RMI server implements the <sapia:command>Server</sapia:command> interface, 
        which specifies methods for starting and stopping, and completely hides server internals from the core. A server's 
        responsibility is restricted to receiving incoming requests (or, more precisely, commands), dispatching them 
        internally so that they can be properly executed, and returning the result to the client. This behavior somewhat
        follows the principles set forth by the <b>Acceptor-Connector</b> pattern, which cleanly separates request reception
        from request handling; in our case, the Acceptor would be the server, and the connector the Ubik RMI command execution
        mechanism.</p>
        
        <p>The transport layer also makes a clean distinction between server and client behavior; as was seen, for the
        server part, a specific interface was designed. For the client-side, another interface comes into play: the
        <sapia:class link="maven/api/org/sapia/ubik/net/Connection.html">Connection</sapia:class> interface. 
        This interface models a client end-point, and specifies the behavior that allows to send and receive objects 
        over the wire. When a Ubik RMI stub sends a remote invocation command to its server, it uses an instance of this 
        interface to do so.</p>
        
        <p>An instance of the <sapia:class>TransportProvider</sapia:class> interface is used by the Ubik RMI core
        to create a new server instance, and to acquire client connections. The core selects the proper provider to use
        based on the <sapia:command>export(...)</sapia:command> method that is called by the application; one of these
        methods allows to pass in the port on which the server should be started. Internally, this method will use the
        default provider - which creates socket servers. On the other hand, an object can be exported as a server
        throught the export method that takes a <sapia:class link="maven/api/org/sapia/ubik/net/ServerAddress.html">ServerAddress</sapia:class> instance as
        a parameter. Internally, the method selects the transport provider based on the return value of the 
        <sapia:command>getTransportType()</sapia:command> method on the address object; the method returns a logical type 
        (as a character string) that maps to a registered transport provider.</p>
        
      </sapia:sect3>
      
    </sapia:sect2>
  </sapia:sect1>
</sapia:page>
