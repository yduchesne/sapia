<sapia:page title="core:launcherHandlerDef" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">
  <sapia:sect1 title="core:launcherHandlerDef">
    <sapia:section>
      <sapia:path name="home" href="../../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="magnet" href="../../home.html" />
      <sapia:path name="manual" href="../home.html#Core%20Elements" />
    </sapia:section>
    <toc />
        
    <sapia:sect2 title="Overview">
	    <p>The <sapia:command>&lt;launcherHandlerDef&gt;</sapia:command> element can be use to
	    extend the functionality of Magnet by adding a new launcher to start a different type
      of process. For example, if you want to add the functionnality of starting a python
      program from Magnet you would first need to implement the <sapia:class>LauncherHandlerIF</sapia:class>
      interface. Your class would manage the Python runtime within the contract of that interface.
      Once this class is coded you need to tell magnet how to associate the new "python" launcher
      to the class you just wrote. To perform the association between the launcher and the class
      you create a launcher handler definition.
	    </p>
    </sapia:sect2>

    <sapia:sect2 title="Arguments">
      <sapia:table>
        <sapia:th>Name</sapia:th>
        <sapia:th>Description</sapia:th>
        <sapia:th>Required</sapia:th>
        <sapia:th>Interpolation</sapia:th>
        <tr>
          <td>type</td>
          <td>Defines the type of launcher for which we provide a handler.</td>
          <td>yes</td>
          <td>yes</td>
        </tr>
        <tr>
          <td>classname</td>
          <td>The name of the class that implements the interface <sapia:class>LaucnherHandlerIF</sapia:class>
          and provides the handling for that script.</td>
          <td>yes</td>
          <td>yes</td>
        </tr>
      </sapia:table>
    </sapia:sect2>

    <sapia:sect2 title="Rendering Operations">
      <p>When a <sapia:command>&lt;launcherHandlerDef&gt;</sapia:command> element is rendered, it performs the following
      operations in order:
        <ol>
          <li>Resolve the type and classname attributes (using variable interpolation).</li>
          <li>Add the new launcher handler definition to the central handler factory used by Magnet.</li>
        </ol>
      </p>
    </sapia:sect2>

    <sapia:sect2 title="Examples">
      <p>This example creates a new launcher handler to start python programs. The association defines
      that the class <sapia:class>com.mycorp.magnet.PythonLauncher</sapia:class> will be use
      everytime the launcher type "python" is used in Magnet.
      </p>
      <sapia:code><![CDATA[
<core:magnet
        xmlns:core="http://schemas.sapia-oss.org/magnet/core/"
        name="LauncherHandlerDefExample1"
        description="This is a first example.">
...
    <core:launcherHandlerDef
            type="python"
            classname="com.mycorp.magnet.PythonLauncher" />
...
</core:magnet>]]></sapia:code>
    </sapia:sect2>
  </sapia:sect1>
</sapia:page>
