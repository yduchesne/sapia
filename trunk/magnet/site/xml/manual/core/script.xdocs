<sapia:page title="core:script" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform" cssPath="../../css/sapia.css">
  <sapia:sect1 title="core:script">
    <sapia:section>
      <sapia:path name="home" href="../../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="magnet" href="../../home.html" />
      <sapia:path name="manual" href="../home.html#Core%20Elements" />
    </sapia:section>
    <toc />
        
    <sapia:sect2 title="Overview">
	    <p>The <sapia:command>&lt;script&gt;</sapia:command> element can be use to define any 
        type of processing magnet has to do before starting the process(es) it contains. The
        content of this element represents the scripting code to be interpreted by a script
        engine. That is, magnet could support any type of scripting: python, java script, ruby...
        Since magnet is a Java application, it was natural to provided magnet with built-in
        support to <a href="http://www.beanshell.org/" target="beanshell">BeanShell</a>: a 
        lightweight scripting for java.
      </p>
      
      <p>To execute a script, you need to specify in the <sapia:command>&lt;script&gt;</sapia:command>
        element what type of scripting engine should be use to process the content. To use the
        BeanShell engine, you need to use the type "<sapia:command>bsh</sapia:command>". The
        <sapia:command>&lt;script&gt;</sapia:command> element is <b>profile-aware</b>. Using it's
        profile attribute, you can specify for which profile a given <sapia:command>&lt;script&gt;</sapia:command>
        element must be rendered and executed. If the profile attribute is not assigned, then the script
        will be used if there is no other <sapia:command>&lt;script&gt;</sapia:command> element for the
        specified profile at run-time. Finally, you can control the behavior of the script when an error occurs
        in the interpretation by the sctipting engine. Using the isAbortingOnError boolean attribute, you
        can stop the execution of the magnet if the value is "true", or you can tell magnet to simply log a
        warning message and resume the execution if the value is "false".
	    </p>
    </sapia:sect2>
        
    <sapia:sect2 title="Arguments">
		  <sapia:table>
		    <sapia:th>Name</sapia:th>
		    <sapia:th>Description</sapia:th>
		    <sapia:th>Required</sapia:th>
		    <sapia:th>Interpolation</sapia:th>
		    <tr>
		      <td>type</td>
		      <td>The type of scripting engine to use to process the script. Use the value "bsh" to use BeanShell.</td>
		      <td>yes</td>
		      <td>no</td>
		    </tr>
		    <tr>
		      <td>profile</td>
		      <td>The name of the profile for which the script must be executed. If the attribute is not provided, the
          script becomes the "default" script that is executed only if not script exists for the executed profile.</td>
		      <td>no</td>
		      <td>no</td>
		    </tr>
		    <tr>
		      <td>isAbortingOnError</td>
		      <td>This attribute defines how magnet behaves when an error occurs executing the script. If the value
            is "true" Magnet logs an error and stops the execution. If the value is "false" Magnet logs a warning
            message and resume the execution. By default the value is "false".</td>
		      <td>no</td>
		      <td>yes</td>
		    </tr>
		  </sapia:table>
    </sapia:sect2>

    <sapia:sect2 title="Rendering Operations">
		  <p>When a <sapia:command>&lt;Script&gt;</sapia:command> element is rendered, it performs the following
		  operations in order:
		    <ol>
		      <li>Resolve the isAbortingOnError attribute (using variable interpolation).</li>
		      <li>Resolve the text context of the <sapia:command>&lt;Script&gt;</sapia:command> element
            (using variable interpolation). This allows one to put variables within the script itself
            and let magnet resolve these variables before the scripting engine gets the code to execute.</li>
		      <li>Create a script handler for the specified script type.</li>
		      <li>Execute the script using the script handler.</li>
		    </ol>
		  </p>
    </sapia:sect2>

    <sapia:sect2 title="Examples">
      <p>This first example uses BeanShell to print a simple message on the standard output:
      </p>
      <sapia:code><![CDATA[
<core:magnet
        xmlns:core="http://schemas.sapia-oss.org/magnet/core/"
        name="ScriptExample1"
        description="This is a first script example.">
...
    <core:script type="bsh">
        System.out.println("A message from BeanShell");
    </core:script>
...
</core:magnet>]]></sapia:code>

      <p>This second example uses BeanShell to create a new directory at startup. It shows how
        you can use the profile attribute to perform conditionnal execution. If the "test" profile
        is execute then the second script element will create a new directory using the current time
         with the prefix "test", otherwise the first script element will create a new directory 
         using the current time only. In both cases Magnet will stop its execution if an error
         occurs creating the new directory beacause the attribute isAbortingOnError is set to true.
      </p>
      <sapia:code><![CDATA[
<core:magnet
        xmlns:core="http://schemas.sapia-oss.org/magnet/core/"
        name="ScriptExample2"
        description="This is a second script example.">
...
    <core:script type="bsh" isAbortingOnError="true">
        File aFile = new File(System.getProperty("user.dir"),
             String.valueOf(System.currentTimeMillis()));
        aFile.mkdirs();
    </core:script>

    <core:script type="bsh" profile="test"
                 isAbortingOnError="true">
        File aFile = new File(System.getProperty("user.dir"),
             "test" + System.currentTimeMillis());
        aFile.mkdirs();
    </core:script>
...
</core:magnet>]]></sapia:code>
    </sapia:sect2>
  </sapia:sect1>
</sapia:page>
  