<descriptor namespace="vlad" 
            name="ifDefined"
            class="org.sapia.validator.rules.IfDefined"
            nested="yes"
            >

  <description>
    <p>
    This rule is meant to encapsulate another rule, and delegates validation to the latter provided
    one of the following condition is met:
      <ul>
          <li>If an accesssor is specified, it is invoked on the object that this instance receives
          as part of a validation context; if the return value of the accessor is null, then the
          encapsulated rule is not called - otherwise it is.</li>
          <li>If no accessor is specified, the above test is made on the current object in the
          validation context's stack. If the current object is not null, the encapsulated rule
          is called.</li>
      </ul>
    </p>
    <p>
    Use this rule to check that a given non-mandatory value exists before proceeding with a given
    validation flow - thus avoiding NullPointerExceptions.</p>
    <p>
    Note that the ifDefined rule takes a <b>single nested rule only</b>.
    </p>
  </description>
  <attributes>
    <attribute name="attribute" mandatory="no">
      <description>Specifies the name of the accessor whose return value is tested. If the return
      value is null, then the encapsulated rule is not called.
      <p>If this attribute is not specified, the current object on the validation context's stack
      is tested - see above for more details.</p>
      <p>
      This attribute's value must use the property access notation specified by the
      <a href="http://jakarta.apache.org/commons/beanutils.html">BeanUtils</a> libary - see 
      the library's <a href="http://jakarta.apache.org/commons/beanutils/api/org/apache/commons/beanutils/package-summary.html">
      javadoc</a> for more information.</p>
      </description>
    </attribute>
  </attributes>
  <examples>
    <example name="Using ifDefined to branch into a given validation flow">
      <description>The <b>optional</b> address of a all employees of a company is checked for a mandatory zip code.</description>
      <content><![CDATA[
<vlad xmlns:vlad="http://www.sapia-oss.org/vlad/rules">

  <ruleSet id="checkCompany">
    
    <vlad:forEach attribute="employees">
      <ruleSet id="checkEmployee">
        <vlad:ifDefined attribute="address">      
          <vlad:mandatory 
                attribute="address.zipCode" 
                id="zipCode">
            <message 
             value="Zip code must be provided"/>
          </vlad:mandatory>
        </vlad:ifDefined>
      </ruleSet>
    </vlad:forEach>      
        
  </ruleSet>
</vlad>]]>      
      </content>
    </example>
  </examples>


</descriptor>