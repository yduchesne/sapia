<sapia:page title="Jetty Service" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">

  <sapia:vmenu>
    <sapia:vsection name="Soto Home" href="../../index.html"/>
    <sapia:vsection name="Project Home" href="index.html"/>
    <sapia:vsection name="Javadoc" href="maven/api/index.html"/>
    <sapia:vsection name="Download" href="download.html"/>
    <sapia:vsection name="Maven" href="maven/index.html"/>
  </sapia:vmenu>

  <sapia:sect1 title="Jetty Service">
    <sapia:section>
      <sapia:path name="home" href="http://www.sapia-oss.org/home.html" />
      <sapia:path name="projects" />
      <sapia:path name="soto" href="../../index.html" />
      <sapia:path name="services" />
      <sapia:path name="jetty" />      
    </sapia:section>
    <toc/>
    
    <sapia:sect2 title="Namespace">
      <ul>
        <li><b>URI</b>: <sapia:command>soto:jetty</sapia:command></li>
        <li><b>Prefix</b>: <sapia:command>jetty</sapia:command></li>
      </ul>
    </sapia:sect2>    
    
    <sapia:sect2 title="Overview">
    
      <p>The <sapia:class link="maven/api/org/sapia/soto/jetty/JettyServiceImpl.html" target="jetty_service">JettyServiceImpl</sapia:class> 
      class integrates the <a href="http://http://www.mortbay.org/">Jetty 6</a> web application server. It allows embedding such a server in 
      Soto applications (implementation follows the guidelines provided in this <a target="jetty_tut" href="http://docs.codehaus.org/display/JETTY/Embedding+Jetty">
      tutorial</a>).</p>
    </sapia:sect2>

    <sapia:sect2 title="Usage">    

      <sapia:sect3 title="Configuring a Jetty Service">
      <p>To use a Jetty service, declare a <sapia:command>jetty:server</sapia:command> element as part of your Soto application. 
      This element will evaluate to a <sapia:class>JettyServiceImpl</sapia:class> instance at runtime.
      </p>
      
      <p>The following demonstrates how a simple Jetty service is configured, with a single web application:</p>

<sapia:code><![CDATA[<soto:app xmlns:soto="sapia:soto"
          xmlns:jetty="soto:jetty">
  
  <soto:service>
    <jetty:server port="8080">
      <jetty:webApp>
        <contextPath>/sample</contextPath>
        <location>${user.dir}/webapp</location>
      </jetty:webApp>
    </jetty:server>
  </soto:service>  
  
</soto:app>]]></sapia:code>

      <p>The <sapia:command>jetty:server</sapia:command> element takes the following attributes/elements:</p>
      <ul>
        <li><b>daemon</b>: if <b>true</b>, the service will be started as a daemon, otherwise as a normal thread 
        (defaults to <b>false</b>).</li>              
        <li><b>statsOn</b>: if <b>true</b>, the internal Jetty server's statistics generation mechanism will be turned on, 
        otherwise no statistics will be generated.</li>                      
        <li><b>port</b>: the port on which the instance must listen (defaults to <b>8080</b>).</li>
        <li><b>classLoaderJava2Compliant</b>: indicates if classloading should be compliant with
        the servlet spec (loading occurs at web classloader first). If the value for this attribute
        is <b>true</b>, such will be the case; if it is <b>false</b>, then the usual classloading 
        strategy will be used (defaults to <b>true</b>).</li>        
        <li><b>webApp</b>: this element is meant to add a web app to the service. It takes the following elements (or attributes):
          <ul>
            <li><b>virtualHost</b>: the virtual host corresponding to the configured web app (optional).</li>          
            <li><b>contextPath</b>: the web app's context path (for example: <b>/sample</b> - mandatory).</li>
            <li><b>location</b>: the path to the web app's directory (mandatory).</li>            
          </ul>
        </li>        
      </ul>
      
      <p>In addition, the <sapia:command>jetty:webApp</sapia:command> element may take nested <sapia:command>param</sapia:command> 
      elements, as follows:</p>
      
<sapia:code><![CDATA[<soto:app xmlns:soto="sapia:soto"
          xmlns:jetty="soto:jetty">
  
  <soto:service>
    <jetty:server port="8080">
      <jetty:webApp>
        <contextPath>/sample</contextPath>
        <location>${user.dir}/webapp</location>
        
        <param name="someKey" value="test" />      
        <param name="someService">              
          <value><soto:serviceRef id="someServiceId" /></value>
        </param>
        
      </jetty:webApp>
    </jetty:server>
  </soto:service>  
  
</soto:app>]]></sapia:code>      

	  <p>A <sapia:command>param</sapia:command> element binds a given value as an attribute to the corresponding web app's 
	  <sapia:class link="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/servlet/ServletContext.html">SerlvetContext</sapia:class>. 
	  Such values can then be retrieved from within the servlet, by using the <sapia:command>getAttribute()</sapia:command> method (passing
	  in as a parameter the name of the object that was bound).</p>
	  
	  <p>This is a convenient way to let servlets have access to preconfigured Soto services.</p>

    </sapia:sect3>
     
    <sapia:sect3 title="Implementation Details">
	  <p>The Jetty service internally starts a Jetty server in a dedicated thread. The Jetty server is stopped when the Jetty
	  service's <sapia:command>dispose()</sapia:command> method is called.</p>    
    </sapia:sect3>
  </sapia:sect2>
  </sapia:sect1>
</sapia:page>
