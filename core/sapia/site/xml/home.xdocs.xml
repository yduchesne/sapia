<sapia:page title="Ubik" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">
  <sapia:vmenu>
    <sapia:vsection name="Project Home" href="home.html"/>
    <sapia:vsection name="Wiki" href="http://code.google.com/p/sapia/wiki/Ubik"/>
    <sapia:vsection name="RMI" href="rmi.html">
      <sapia:vitem name="For Dummies" href="rmi.html#dummies" />
      <sapia:vitem name="Believing" href="rmi.html#believing" />
      <sapia:vitem name="Architecture" href="architecture.html" />
      <sapia:vitem name="Tutorial" href="tutorial.html" />    
    </sapia:vsection>
    
    <sapia:vsection name="Naming" href="naming.html">
      <sapia:vitem name="Robust Naming" href="naming.html#robust" />
      <sapia:vitem name="Usage" href="naming.html#usage" />
      <sapia:vitem name="Advanced" href="naming.html#advanced" />    
    </sapia:vsection>
    
    <sapia:vsection name="Transports">
      <sapia:vitem name="HTTP" href="transport/http.html" />
      <sapia:vitem name="Mplex" href="transport/mplex.html" />
	  <sapia:vitem name="Standard/TCP" href="transport/standard_tcp.html" />
      <sapia:vitem name="NIO/TCP" href="transport/nio_tcp.html" />
    </sapia:vsection>  
    
    <sapia:vsection name="Group Comm" href="group_communication.html">
      <sapia:vitem name="Event Channel" href="group_communication.html#eventchannel" />
      <sapia:vitem name="Protocol" href="group_communication.html#control_protocol" />    
      <sapia:vitem name="Avis" href="group_communication.html#using_avis" />
      <sapia:vitem name="UDP Unicast" href="group_communication.html#udp_unicast" />
    </sapia:vsection>
    
    <sapia:vsection name="Customization" href="customization.html">
      <sapia:vitem name="Logging" href="customization.html#logging" />    
      <sapia:vitem name="Stats" href="customization.html#stats" />
      <!--sapia:vitem name="JMX" href="customization.html#jmx" /-->
      <sapia:vitem name="Stubs" href="customization.html#stubs" />
      <sapia:vitem name="Callbacks" href="customization.html#callbacks" />    
    </sapia:vsection>                
    
    <sapia:vsection name="FAQ" href="faq.html">
      <sapia:vitem name="Licensing" href="faq.html#licensing" />    
      <sapia:vitem name="Networking" href="faq.html#networking" />
    </sapia:vsection>         
    
    <sapia:vsection name="Javadoc" href="maven/api/index.html"/>
    <sapia:vsection name="Download" href="download.html"/>
    <sapia:vsection name="Mailing List" href="list.html"/>
  </sapia:vmenu>
  <sapia:sect1 title="Ubik 3">
    <sapia:section>
      <sapia:path name="home" href="../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="ubik" />
    </sapia:section>
    <sapia:sect2 title="Overview">
    
      <p>Ubik is a performant, scalable, feature-rich distributed objects framework. 
 	  It offers a RMI-like API that allows easily and transparently performing method invocations 
 	  over the wire, and packs features that guarantee scalability across the board.</p>
 	  
 	  <p>This third version of Ubik sports major improvements: use of the 
 	  JBoss Serialization library, a new group communication implementation, a vastly refactored core, 
 	  new customizations points (such as the ability to plug in your own stub generation
 	  strategy), etc.</p>
 	  
    </sapia:sect2>
    
    <sapia:sect2 title="Features">
    
      <p>Ubik currently offers APIs that help build distributed applications. These APIs
      can be summarized as follows:</p>
      
      <sapia:sect3 title="Ubik RMI">
        <p>Ubik RMI is similar to the JDK's RMI. Yet it differs from it in many ways. The following
        features illustrate how:</p>
        <ul>
          <li><a href="transport/nio_tcp.html">NIO-based transport</a>: extremely performant and scalabale (potentially up to thousands of
          concurrent connections);</li>
          <li>super-fast serialization based upon the <a href="http://www.jboss.org/serialization/">JBoss Serialization</a> library;</li>                  
          <li>automatic fail-over for stubs that are bound into Ubik JNDI - see next section;</li>
          <li><a href="naming.html#smartstubs">sticky stubs</a> and <a href="naming.html#smartstubs">stateless stubs</a> 
          (that perform round-robin over the different servers);</li>
          <li>client-side discovery (naming service is automatically discovered, stateless stubs 
          automatically discover new servers and add them to their round-robin list);</li>
          <li>different discovery mechanisms (IP Multicast, TCP-based broadcast relying on <a href="http://avis.sourceforge.net/">Avis</a>);</li>          
          <li>support for <a href="tutorial.html#callbacks">callbacks</a>;</li>                            
          <li>dynamically generated stubs (no stub compilation);</li>
          <li>no need to throw <sapia:class>RemoteException</sapia:class>s;</li>
          <li>no need to extend <sapia:class>UnicastRemoteObject</sapia:class>;</li>
          <li>supports colocated method calls (no invocation via network if client and server are in
          the same VM;</li>
          <li>supports client-side and server-side interceptors;</li>
          <li>a <sapia:class link="maven/api/org/sapia/ubik/rmi/Remote.html">@Remote</sapia:class> annotation, which can be used
          instead of implementing the JDK's <sapia:class>Remote</sapia:class> interface;</li>
          <li><a href="customization.html">customizable</a>: extend Ubik for generating your own stubs.</li>
          <li>inherently secure: Ubik does not support dynamic code download (therefore, no "foreign code" can enter a Ubik server). This greatly
          reduces configuration and security-related hassles (setting setting up a remote distributed codebase, 
          managing security managers and permissions, etc.);</li>
        </ul>
      </sapia:sect3>
      
      <sapia:sect3 title="Ubik JNDI">
        Ubik offers a complete JNDI implementation allowing to publish Ubik RMI servers in
        a reliable fashion, using the JNDI's programming model. Multiple Ubik JNDI servers can
        interoperate in a domain to provide reliable access to published services. Ubik JNDI has
        the following features:
        <ul>
          <li>Domain-wide replication of the JNDI tree;</li>
          <li>Ubik RMI stubs that are bound into a Ubik JNDI server are automatically made 
          "naming aware": they will automatically handle fail-over and/or round-robin (depending
          on the type of stub) provided that connection to their server of origin fails;</li>
          <li>allows binding multiple servers under the same name - essential for scalability;</li>
          <li>client-side discovery of JNDI servers.</li>
        </ul>
      </sapia:sect3>
    </sapia:sect2>    
  </sapia:sect1>
</sapia:page>
