<!--
    Magnet configuration file DTD, version 2.0
    Author: Jean-Cedric Desrochers
    
    This file contains the definitions of a Magnet configuration file.
    
    XML document that conform to this DTD should declare the following doctype:
    
    <!DOCTYPE magnet PUBLIC "-//SAPIA OSS//Magnet DTD 2.0//EN"
                     "http://www.sapia-oss.org/dtd/magnet-2.0.dtd"> 

-->

<!ELEMENT magnet ((protocolHandlerDef | scriptHandlerDef | launchHandlerDef)*,
                  script*, (parameters | codebase | classpath | environment)*,
                  launcher*)>

<!ATTLIST magnet xmlns       CDATA #FIXED 'http://schemas.sapia-oss.org/magnet/'>
<!ATTLIST magnet name        CDATA #REQUIRED>
<!ATTLIST magnet description CDATA #IMPLIED>
<!ATTLIST magnet extends     CDATA #IMPLIED>


<!--
    Extension point to plug in your own protocols to resolve and load resources.
    By default Magnet handles the file and http schemes - corresponding to the
    file system and HTTP protocols.
-->
<!ELEMENT protocolHandlerDef EMPTY>

<!ATTLIST protocolHandlerDef type      CDATA #REQUIRED>
<!ATTLIST protocolHandlerDef classname CDATA #REQUIRED>


<!--
    Extension point to plug in your own scripting engine. Magnet comes with
    Beanshell (http://www.beanshell.org) integration built-in.-->
<!ELEMENT scriptHandlerDef EMPTY>

<!ATTLIST scriptHandlerDef type      CDATA #REQUIRED>
<!ATTLIST scriptHandlerDef classname CDATA #REQUIRED>


<!--
    Extension point to plug in your own class that launches applications. Magnet
    offers a java and a system launcher (to start Java and native processes, respectively).
-->
<!ELEMENT launchHandlerDef EMPTY>

<!ATTLIST launchHandlerDef type      CDATA #REQUIRED>
<!ATTLIST launchHandlerDef classname CDATA #REQUIRED>


<!--
    A Magnet configuration can contain various script elements to perform intialization tasks. At runtime
    Magnet will render and execute the script that matches the execution profile. If no script is
    provided for the profile and a script exists for the default one, it will be executed. Only one
    script by profile can exist within a Magnet configuration.
-->
<!ELEMENT script (#PCDATA)>
<!ATTLIST script type              CDATA #REQUIRED>
<!ATTLIST script profile           CDATA #IMPLIED>
<!ATTLIST script isAbortingOnError (true | false) "false">


<!--
    To define global parameters within the Magnet. Parameters can be specified for a given
    profile or for all profiles (called the default profile).
-->
<!ELEMENT parameters ( param+ )>

<!ATTLIST parameters profile CDATA #IMPLIED>


<!--
    Each param child element defines a given variable.
-->
<!ELEMENT param EMPTY>

<!ATTLIST param name   CDATA #REQUIRED>
<!ATTLIST param value  CDATA #REQUIRED>
<!ATTLIST param scope  (magnet | system) "magnet">
<!ATTLIST param if     CDATA #IMPLIED>
<!ATTLIST param unless CDATA #IMPLIED>


<!--
    A path element can be used to define a list of resources that are used in a given
    context (defining the classpath of a Java application, for example).
-->
<!ELEMENT path (include*, exclude*)>

<!ATTLIST path protocol  CDATA "file">
<!ATTLIST path host      CDATA #IMPLIED>
<!ATTLIST path directory CDATA #IMPLIED>
<!ATTLIST path sorting   (ascending | descending) #IMPLIED>


<!--
    Define resources to include in a path.
-->
<!ELEMENT include EMPTY>

<!ATTLIST include pattern CDATA #IMPLIED>


<!--
    Define resources to exclude from a path.
-->
<!ELEMENT exclude EMPTY>

<!ATTLIST exclude pattern CDATA #IMPLIED>


<!--
    Provides a convenient way to define the java.rmi.server.codebase system property .
-->
<!ELEMENT codebase (path+)>

<!ATTLIST codebase profile CDATA #IMPLIED>


<!--
    The classpath element allows defining the classpath of a Java application. It provides
    a convenient and elegant way to declare what are the files or resource directories
    that are needed as part of an application's classpath. 
-->
<!ELEMENT classpath (path*)>

<!ATTLIST classpath id     CDATA #IMPLIED>
<!ATTLIST classpath parent CDATA #IMPLIED>


<!--
    The environment element defines a group of variables that is passed to the system launcher
    as environment variables.
-->
<!ELEMENT environment (variable+)>

<!ATTLIST environment id     CDATA #IMPLIED>
<!ATTLIST environment parent CDATA #IMPLIED>


<!--
    The variable element defines a name-value pair that corresponds to an environment variable.
-->
<!ELEMENT variable EMPTY>

<!ATTLIST variable name  CDATA #REQUIRED>
<!ATTLIST variable value CDATA #REQUIRED>


<!--
    The launcher element defines how to launch (or start) a process with Magnet. It supports
    two types of launcher. The "java" type will use the Java reflexion API to dynamically call
    the main(String[] args) method of the specified class. The other supported type is "system"
    which creates a command string and executes it at the OS level using the Java
    Runtime.getRuntime().exec() method. Custom launchers can be introduced with the launchHandlerDef
    element (see documentation).
-->
<!ELEMENT launcher ( profile+ )>

<!-- Common attributes for launchers -->
<!ATTLIST launcher type      CDATA #REQUIRED>
<!ATTLIST launcher name      CDATA #REQUIRED>
<!ATTLIST launcher default   CDATA #IMPLIED>
<!ATTLIST launcher waitTime  CDATA #IMPLIED>

<!-- Attributes for java launcher -->
<!ATTLIST launcher mainClass CDATA #IMPLIED>
<!ATTLIST launcher args      CDATA #IMPLIED>
<!ATTLIST launcher isDaemon  (true | false) "false">

<!-- Attributes for system launcher -->
<!ATTLIST launcher command          CDATA #IMPLIED>
<!ATTLIST launcher workingDirectory CDATA #IMPLIED>
<!ATTLIST launcher os               CDATA #IMPLIED>


<!--
    The profile element defines the configuration of the launcher for a given profile. It provides a
    way to define parameters specific to the launcher type (like the classpath for "java" launchers
    and environment variables for "system" launchers).
-->
<!ELEMENT profile (parameters?, (classpath | environment?))>

<!ATTLIST profile name CDATA #REQUIRED>



