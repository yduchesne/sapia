<sapia:page title="Hibernate Service" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">

  <sapia:vmenu>
    <sapia:vsection name="Soto Home" href="../../index.html"/>
    <sapia:vsection name="Project Home" href="index.html"/>
    <sapia:vsection name="Javadoc" href="maven/api/index.html"/>
    <sapia:vsection name="Download" href="download.html"/>
    <sapia:vsection name="Maven" href="maven/index.html"/>
  </sapia:vmenu>

  <sapia:sect1 title="Hibernate Service">
    <sapia:section>
      <sapia:path name="home" href="http://www.sapia-oss.org/home.html" />
      <sapia:path name="projects" />
      <sapia:path name="soto" href="../../index.html" />
      <sapia:path name="services" />
      <sapia:path name="hibernate" />      
    </sapia:section>
    <toc/>
    <sapia:sect2 title="Overview">
    
      <p>Soto integrates the <a href="http://www.hibernate.org" target="hb8_site">Hibernate</a> O/R mapping framework through the 
      <sapia:class link="maven/api/org/sapia/soto/hibernate/HibernateService.html" target="hb8_service">HibernateService</sapia:class> 
      interface, which specifies a single method that is meant to return an Hibernate <sapia:class>SessionFactory</sapia:class>.</p>

      <p>The <sapia:class link="maven/api/org/sapia/soto/hibernate/HibernateServiceImpl.html" target="hb8_service">HibernateServiceImpl</sapia:class> 
      class is a Soto service implementing that interface. It initializes an Hibernate SessionFactory, given a configuration.
      That factory can later on be retrieved by client code in order to obtain Hibernate <sapia:class>Session</sapia:class>s.</p>
    </sapia:sect2>

    <sapia:sect2 title="Usage">    

      <sapia:sect3 title="Configuring">
      <p>The example below demonstrates how to configure the Hibernate service:</p>

<sapia:code>
<![CDATA[<soto:app 
  xmlns:soto="sapia:soto"
  xmlns:hb8="soto:hibernate">
...  
  <soto:service>
    <hb8:hibernate config="conf/hibernate.xml">
      <class>org.acmepetstore.Dog</class>
      <class>org.acmepetstore.Cat</class>
      <property name="connection.datasource" 
        value="java:/comp/env/jdbc/MyDB" />
    </hb8:hibernate>
  </soto:service>  
...
</soto:app>]]>
</sapia:code>

      <p>Hibernate service supports the following attributes and elements   :</p>
      <ul>
        <li><b>config</b>: the path to the resource holding the Hibernate configuration. The service uses
        Soto's resource resolving capabilities to retrieve it. Its content is expected to respect
        Hibernate's <a target="hb8_config" href="http://www.hibernate.org/hib_docs/v3/reference/en/html/session-configuration.html#configuration-xmlconfig"> configuration format</a></li>

        <li><b>class (0-*)</b>: the name of a persistent class (this is somewhat of a convenience that spares 
        having to specify a <sapia:command>mapping</sapia:command> element in the Hibernate configuration).</li>

        <li><b>property (0-*)</b>: an hibernate property (again a convenience that spares 
        having to specify a <sapia:command>property</sapia:command> element in the Hibernate configuration).</li>
      </ul>
      </sapia:sect3>
      <sapia:sect3 title="Programming">
        <p>The Hibernate service is of course meant to be used by your application services. Here's an example:</p>

<sapia:code>
import org.sapia.soto.Service;
import org.sapia.soto.EnvAware;
import org.sapia.soto.hibernate.HibernateService;

public class MyService implements Service, EnvAware{

  private Env _env;
  private HibernateService _hibernate;

  public void setEnv(Env env){  
    _env = env;
  }

  public void setHibernate(HibernateService hibernate){
    _hibernate = hibernate;
  }

  public void init() throws Exception{
    if(_hibernate == null){
      _hibernate = _env.lookup(HibernateService.class);
    }
  }

  public void start(){}
  public void dispose(){}

}
</sapia:code>
        <p>And then the hypothetical corresponding configuration:</p>

<sapia:code>
<![CDATA[<soto:app 
  xmlns:soto="sapia:soto"
  xmlns:hb8="soto:hibernate">
...  
  <soto:service id="petDB">
    <hb8:hibernate config="conf/hibernate.xml">
      <class>org.acmepetstore.Dog</class>
      <class>org.acmepetstore.Cat</class>
      <property name="connection.datasource" 
        value="java:/comp/env/jdbc/MyDB" />
    </hb8:hibernate>
  </soto:service>  

  <soto:service>
    <sample:myService />
  </soto:service>  
...
</soto:app>]]>
</sapia:code>

        <p>As one can see, we have not explicitely set the <sapia:class>HibernateService</sapia:class>
          instance on our service implementation. In this case, we took our precautions by looking up
          an instance through Soto's environment if we detect that our current instance is null.</p>

         <p>If more than one <sapia:class>HibernateService</sapia:class> is used in your application,
         then you can explicitely assign these instances using Soto's <sapia:command>soto:serviceRef</sapia:command>
         tag:</p>

<sapia:code>
<![CDATA[<soto:app 
  xmlns:soto="sapia:soto"
  xmlns:hb8="soto:hibernate">
...  
  <soto:service>
    <sample:myService>
      <soto:serviceRef id="petDB" />
    </sample>
  </soto:service>  
...
</soto:app>]]>
</sapia:code>

      </sapia:sect3>
      <sapia:sect3 title="The SessionState Class">
        <p>Soto comes with a convenient class that implements thread-registration of Hibernate sessions.
        The <sapia:class link="maven/api/org/sapia/soto/hibernate/SessionState.html">SessionState</sapia:class>
        class provides various static methods pertaining to session management (internally, the current
        session is registered with a <sapia:class>ThreadLocal</sapia:class>). One usage of this class is in the context of the
        web, were an Hibernate session may be acquired for each request, and registered with the executing thread.
        Application code is thus shielded from manipulating the Hibernate session factory, in order to control session boundaries. In such a
        case, application code uses the <sapia:class>SessionState</sapia:class> class. In such a scenario, an Hibernate session is registered
        with every incoming request thread (and unregistering it upon request completion). 
        </p>
        <p>The following illustrates how to use the class:</p>
<sapia:code>
// the hibernate variable is an instance of HibernateService...
SessionFactory factory = hibernate.getSessionFactory();

Session session = SessionState.register(factory);
// getting an Hibernate transaction
Transaction tx = null; 
try{
  tx = session.beginTransaction();

  // here call application code

  tx.commit();

}catch(Exception e){
  if(tx != null)
    tx.rollback();
  throw e;
}finally{
  // the following closes the session and "deregisters" it from the 
  // current thread..
  SessionState.unregister(true);

  // note that SessionState.unregister(false) 
  // would deregister the session
  // from the current thread but would 
  // not close it.
}
</sapia:code>

      </sapia:sect3>
     
    </sapia:sect2>
  </sapia:sect1>
</sapia:page>
