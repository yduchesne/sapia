package org.sapia.soto.jetty;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import org.mortbay.jetty.Server;
import org.mortbay.jetty.handler.DefaultHandler;
import org.mortbay.jetty.handler.HandlerCollection;
import org.mortbay.jetty.handler.StatisticsHandler;
import org.mortbay.jetty.nio.SelectChannelConnector;
import org.sapia.soto.Debug;
import org.sapia.soto.Service;
import org.sapia.soto.ubik.monitor.FeedbackMonitorable;
import org.sapia.soto.util.Param;

public class JettyServiceImpl implements JettyService, Service, FeedbackMonitorable{
  
  private String _address;
  private int _port = 8080;
  private Server _server = new Server();
  private boolean _statsOn;
  private boolean _classLoaderJava2Compliant = true;
  private List _webapps = new ArrayList();
  private StatisticsHandler _stats = new StatisticsHandler();
  
  
  public void setAddress(String host){
    _address = host;
  }
  
  public void setPort(int port){
    _port = port;
  }
  
  public void setStatsOn(boolean statsOn){
    _statsOn = statsOn;
  }  
  
  public void setClassLoaderJava2Compliant(boolean compliant){
    _classLoaderJava2Compliant = compliant;
  }
  
  public void addWebApp(WebAppConfig config){
    _webapps.add(config);
  }
  
  public void addWebApps(Collection configs){
    Iterator itr = configs.iterator();
    while(itr.hasNext()){
      WebAppConfig conf = (WebAppConfig)itr.next();
      if(Debug.DEBUG){
        Debug.debug(getClass(), "Adding web app: " + conf.getContextPath());
      }
      addWebApp(conf);
    }
  }  
  
  public Server createConfig(){
    return _server;
  }

  /////////// Soto FeedbackMonitorable interface

  /**
   * Returns the statistics generated by this instance's internal Jetty server.
   * 
   * @see #setStatsOn(boolean)
   */
  public Properties monitor() throws Exception {
    Properties props = new Properties();
    props.setProperty("requestsDurationAve", Long.toString(_stats.getRequestTimeAverage()));
    props.setProperty("requestsDurationMax", Long.toString(_stats.getRequestTimeMax()));
    props.setProperty("requestsDurationMin", Long.toString(_stats.getRequestTimeMin()));
    props.setProperty("requestsDurationTotal", Long.toString(_stats.getRequestTimeTotal()));
    props.setProperty("requestsActive", Long.toString(_stats.getRequestsActive()));
    props.setProperty("requestsActiveMax", Long.toString(_stats.getRequestsActiveMax()));
    props.setProperty("requests", Long.toString(_stats.getRequests()));      
    return props;
  }
  
  /////////// Soto Service interface
  
  public void init() throws Exception{
    _server.setStopAtShutdown(true);    
  }
  
  public void start() throws Exception {
    HandlerCollection handlers = new HandlerCollection();    
    for(int i = 0; i < _webapps.size(); i++){
      WebAppConfig config = (WebAppConfig)_webapps.get(i);
      if(config.getContextPath() == null){
        throw new IllegalStateException("Web app context path not specified");
      }
      if(config.getLocation() == null){
        throw new IllegalStateException("Web app location not specified");
      }
      List params = config.getParams();
      for(int j = 0; j < params.size(); j++){
        Param p = (Param)params.get(j);
        if(p.getName() != null && p.getValue() != null){
          config.setAttribute(p.getName(), p.getValue());
        }
      }
      
      config.setParentLoaderPriority(_classLoaderJava2Compliant);
      handlers.addHandler(config);
    }
    
    
    if(_statsOn){
      handlers.addHandler(_stats);
    }
    handlers.addHandler(new DefaultHandler());
    
    SelectChannelConnector connector = new SelectChannelConnector();
    connector.setPort(_port);
    if(_address != null){
      connector.setHost(_address);
    }
    
    _server.addConnector(connector);    
    
    _server.start();
  }
  
  public void dispose() {
    if(_server != null && _server.isStarted()){
      try{
        _server.destroy();
      }catch(Exception e){   
        //noop
      }
    }
  }

}
