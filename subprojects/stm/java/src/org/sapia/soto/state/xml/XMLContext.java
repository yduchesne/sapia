package org.sapia.soto.state.xml;

import java.util.Map;

import org.sapia.soto.state.Context;
import org.sapia.soto.state.MVC;
import org.xml.sax.ContentHandler;

/**
 * Specifies the behavior of <code>Context</code> s that allow piping SAX
 * events to the caller application.
 * 
 * @see org.sapia.soto.state.Context
 * 
 * @author Yanick Duchesne
 * 
 * <dl>
 * <dt><b>Copyright: </b>
 * <dd>Copyright &#169; 2002-2004 <a href="http://www.sapia-oss.org">Sapia Open
 * Source Software </a>. All Rights Reserved.</dd>
 * </dt>
 * <dt><b>License: </b>
 * <dd>Read the license.txt file of the jar or visit the <a
 * href="http://www.sapia-oss.org/license.html">license page </a> at the Sapia
 * OSS web site</dd>
 * </dt>
 * </dl>
 */
public interface XMLContext extends Context, MVC {

  /**
   * @param handler
   *          the <code>ContentHandler</code> that will be used to pipe SAX
   *          events through this instance.
   */
  public void setContentHandler(ContentHandler handler);

  /**
   * @return the <code>ContentHandler</code> that is used to pipe SAX events
   *         through this instance.
   */
  public ContentHandler getContentHandler();

  /**
   * Returns the map of objects that are to be bound in pending "views", such as
   * XSL or STX stylesheets, templates generated by template engines such as
   * Velocity or freemarker, etc.
   * 
   * @see MVC#getViewParams()
   */
  public Map getViewParams();

}
