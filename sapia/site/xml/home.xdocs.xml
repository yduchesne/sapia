<sapia:page title="Clazzy" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">
  <sapia:vmenu>
    <sapia:vsection name="Project Home" href="home.html"/>
    <sapia:vsection name="Javadoc" href="maven/api/index.html"/>
    <sapia:vsection name="Download" href="download.html"/>
    <sapia:vsection name="Mailing List" href="list.html"/>
    <sapia:vsection name="Maven" href="maven/index.html"/>
  </sapia:vmenu>
  <sapia:sect1 title="Clazzy">
    <sapia:section>
      <sapia:path name="home" href="../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="clazzy" />
    </sapia:section>
    <toc/>
    <sapia:sect2 title="Overview">
      <p>Clazzy is a basic classloading framework that was made necessary due to
      a limitation in the JDK's <sapia:class>URLClassLoader</sapia:class> class,
      which does not provide a hook to cleanly close underlying jar files (when
      accessing classes and resources in such files). Under Windows, this forbids
      deletion of said jar files while the corresponding VM is running - a bugging
      limitation if you are implementing hot-deployment.</p>
    </sapia:sect2>
    
    <sapia:sect2 title="Design">
      <p>Get the following and you're off:</p>
      <ul>
        <li>The <sapia:class link="maven/api/org/sapia/clazzy/loader/Loader.html" target="target_window">Loader</sapia:class> interface
	abstracts sources of bytes and "resources". The framework provides such loader implementation that load bytes from the
	file system or from jar files.</li>        
        <li>The <sapia:class link="maven/api/org/sapia/clazzy/BaseClassLoader.html">BaseClassLoader</sapia:class> provides basic 
	classloading behavior. It supports the JDK's delegation model, and can optionally proceed otherwise if desired (delegating to
	child classloaders before delegating to the parent classloader).</li>                
        <li>The most useful class in the framework is probably the 
	    <sapia:class link="maven/api/org/sapia/clazzy/CompositeClassLoader.html">CompositeClassLoader</sapia:class> class. An instance thereof
	    is "composed" of multiple <sapia:class>Loader</sapia:class>s that are searched sequentially.
	</li>
      </ul>
    </sapia:sect2>
    
    <sapia:sect2 title="Learning by Example">
      <sapia:sect-desc>
       <p>The example below should prove a thorough enough introduction. For more
       details, see the <a href="api/index.html">javadoc</a> and the test cases.</p>
      </sapia:sect-desc>
      
<sapia:code>
import org.sapia.clazzy.*

...

  LoaderSelector selector = new DefaultLoaderSelector();
  
  // the path below can be delimited by ':' or ';'
  String classpath = "/some/path/classes:some/path/lib/some.jar");
  
  CompositeClassLoader loader = 
    CompositeClassLoaderBuilder.parseClassPath(
                                  null, 
                                  new DefaultLoaderSelector(), 
				  classpath
				);
  Class myClass = loader.loadClass("com.foo.myclass");
  
  // do not forget the following when you're finished with
  // the classloader: it releases all underlying resources...
  
  loader.close();
..
</sapia:code>
    <p/>
      <sapia:note>
      Note that if you are using <sapia:class>java.net.URL</sapia:class> instances
      in conjunction with this framework, make sure you define the 
      <sapia:command>java.protocol.handler.pkgs</sapia:command> system property, 
      whose value should be <sapia:command>org.sapia</sapia:command>. See the
      <sapia:class link="maven/api/org/sapia/clazzy/ClazzyURLStreamHandlerFactory.html" target="target_window">javadoc</sapia:class>
      for more details.
      </sapia:note>
    </sapia:sect2>
  </sapia:sect1>
</sapia:page>
