<sapia:page title="java:classpath" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform" cssPath="../../css/sapia.css">
  <sapia:sect1 title="classpath">
    <sapia:section>
      <sapia:path name="home" href="../../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="magnet" href="../../home.html" />
      <sapia:path name="reference" href="../home.html#Java%20Elements" />
      <sapia:path name="java" />      
      <sapia:path name="classpath" />     
    </sapia:section>
    <toc />
        
    <sapia:sect2 title="Overview">
      <p>
        The <sapia:command>&lt;classpath&gt;</sapia:command> element allows defining the classpath
        of a Java application. It provides a convenient and elegant way to declare what are the files
        or resource directories that are needed as part of an application's classpath.
      </p>
      
      <p>
        An interesting feature is that you can create a hierarchy of <sapia:command>&lt;classpath&gt;</sapia:command>
        elements - and therefore classloaders. Using the <sapia:command>id</sapia:command> and the 
        <sapia:command>parent</sapia:command> attributes, a child classpath can refer to a parent classpath. 
        This gives you the possibility to organize your resources for reuse, provides the flexibility to manage 
        the Java classloader hierarchy of your application. You could even have more than one application as 
        part of the same Magnet configuration that share a common classpath, yet have their own one 
        (more on classloader hierarchies further below).
      </p>
    </sapia:sect2>
        
    <sapia:sect2 title="Attributes">
      <p>The following lists the xml attributes of the <sapia:command>classpath</sapia:command> element:
      </p>
      <sapia:table>
        <sapia:th>Name</sapia:th>
        <sapia:th>Description</sapia:th>
        <sapia:th>Required</sapia:th>
        <sapia:th>Interpolation</sapia:th>
        <tr>
          <td>id</td>
          <td>Uniquely identifies the classpath.</td>
          <td>no</td>
          <td>yes</td>
        </tr>
        <tr>
          <td>parent</td>
          <td>The id of the parent classpath of this classpath.</td>
          <td>no</td>
          <td>yes</td>
        </tr>
      </sapia:table>
    </sapia:sect2>
    
    <sapia:sect2 title="Child Elements">
      <p>The following lists the possible child xml elements the <sapia:command>classpath</sapia:command> element
      can hold:
      </p>
      <sapia:table>
        <sapia:th>Name</sapia:th>
        <sapia:th>Cardinality</sapia:th>
        <sapia:th>Description</sapia:th>
        <tr>
          <td><a href="../core/path.html" target="main">path</a></td>
          <td>1 or *</td>
          <td>Defines the resources of this classpath.</td>
        </tr>
      </sapia:table>
    </sapia:sect2>

    <sapia:sect2 title="Rendering Operations">
      <p>When a <sapia:command>&lt;classpath&gt;</sapia:command> element is rendered, it performs the following
      operations in order:
        <ol>
          <li>Resolves the id and parent attributes (using variable interpolation).</li>
          <li>Renders all the <sapia:command>&lt;path&gt;</sapia:command> child elements.</li>
        </ol>
      </p>
    </sapia:sect2>

    <sapia:sect2 title="Examples">
      <p>This first example shows a <sapia:command>classpath</sapia:command> element that will contains 
      all the jar files from the <sapia:command>${user.dir}/lib</sapia:command> directory:
      </p>
      <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="ClasspathExample1"
        description="This is a first classpath example.">
...
    <classpath>
        <path directory="${user.dir}/libs">
            <include pattern="*.jar" />
        </path>
    </classpath>
...
</magnet>]]></sapia:code>

      <p>This second example creates a simple classpath hierarchy with a first 'api-libs' classpath
      that contains all the jar files of the <sapia:command>${user.dir}/api-interfaces</sapia:command>
      directory and an 'app-libs' child classpath that contains the directory 
      <sapia:command>${user.dir}/config/</sapia:command> (for easy access to configuration files) and
      all the jar files of the <sapia:command>${user.dir}/app-libs</sapia:command> directory:
      </p>
      <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="ClasspathExample2"
        description="This is a second classpath example.">
...
    <classpath id="api-libs">
        <path directory="${user.dir}/api-interfaces">
            <include pattern="*.jar" />
        </path>
    </classpath>

    <classpath id="app-libs" parent="api-libs">
        <path directory="${user.dir}/config/">
        <path directory="${user.dir}/app-libs">
            <include pattern="*.jar" />
        </path>
    </classpath>
...
</magnet>]]></sapia:code>

    </sapia:sect2>

    <sapia:sect2 title="Classloader Hierarchy">
      <p>It is important to mention that Magnet will keep a one-to-one relationship between a classpath
      element and a Java classloader. When a hierarchy of classpath elements is created in your Magnet
      configuration file, the same classloader hierarchy will be created in the JVM's memory.
      Magnet will use the system classloader of the JVM as the root of the classloader hierarchy.
      </p>
      
      <p>This gives the flexibility to the programmer to decide what is the scope of the classes used
      when launching Java applications(especially when launching more than one application in
      a single JVM). It also gives an elegant way to workaround classloading issues that can arise when
      using third party tools. 
      </p>
    </sapia:sect2>

  </sapia:sect1>
</sapia:page>
