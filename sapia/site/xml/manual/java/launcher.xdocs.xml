<sapia:page title="java:launcher" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform" cssPath="../../css/sapia.css">
  <sapia:sect1 title="launcher">

    <sapia:section>
      <sapia:path name="home" href="../../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="magnet" href="../../home.html" />
      <sapia:path name="reference" href="../home.html#Java%20Elements" />
      <sapia:path name="java" />      
      <sapia:path name="launcher" />
    </sapia:section>

    <toc />
        
    <sapia:sect2 title="Overview">
      <p>The Java <sapia:command>&lt;launcher&gt;</sapia:command> element defines a Java application
      that will be executed by Magnet. Based on the provided configuration, Magnet will use the Java
      reflexion API to dynamically call the <sapia:command>main(String[] args)</sapia:command> method
      of the specified class.
      </p>
      
      <p>Magnet supports starting more than one Java application per JVM. Indeed,
      the flexible classloader strategy configuration scheme that Magnet features 
      provides a baseground for many applications to live within the
      same JVM, each application with its own classloader. As discussed in the <a href="./classpath.html">classpath</a>
      element documentation, you can design a classloader hierarchies that suits your needs.
      </p>
    </sapia:sect2>
        
    <sapia:sect2 title="Attributes">
      <p>The following list the xml attributes of the Java <sapia:command>launcher</sapia:command> element:
      </p>
      <sapia:table>
        <sapia:th>Name</sapia:th>
        <sapia:th>Description</sapia:th>
        <sapia:th>Required</sapia:th>
        <sapia:th>Interpolation</sapia:th>
        <tr>
          <td>type</td>
          <td>Defines the type of launcher. This attribute must have the value 'java'.</td>
          <td>yes</td>
          <td>no</td>
        </tr>
        <tr>
          <td>name</td>
          <td>The name of this Java launcher.</td>
          <td>yes</td>
          <td>no</td>
        </tr>
        <tr>
          <td>mainClass</td>
          <td>The fully qualified name of the class that contains the <sapia:command>main()</sapia:command> method to invoke.</td>
          <td>yes</td>
          <td>yes</td>
        </tr>
        <tr>
          <td>args</td>
          <td>Defines the application arguments that will be passed to the <sapia:command>main()</sapia:command> method of the main class.</td>
          <td>no</td>
          <td>yes</td>
        </tr>
        <tr>
          <td>isDaemon</td>
          <td>Tells Magnet how it should setup the thread that will call the class' <sapia:command>main()</sapia:command> method. 
          The default value is <sapia:command>false</sapia:command>.</td>
          <td>no</td>
          <td>yes</td>
        </tr>
        <tr>
          <td>default</td>
          <td>The name of the default profile of this launcher. This is optional and allows specifying
          which profile of this launcher will be executed in the cases where the profile specified at
          startup is not configured at the level of this launcher.</td>
          <td>no</td>
          <td>no</td>
        </tr>
        <tr>
          <td>waitTime</td>
          <td>If specified, tells Magnet how many milliseconds it needs to wait after launching this Java
          application, before resuming its execution. This can be used to insert some pause between
          application startups when your Magnet file contains many launchers.</td>
          <td>no</td>
          <td>no</td>
        </tr>
      </sapia:table>
    </sapia:sect2>
        
    <sapia:sect2 title="Child Elements">
      <p>The following lists the possible child xml elements the Java <sapia:command>launcher</sapia:command> element
      can hold:
      </p>
      <sapia:table>
        <sapia:th>Name</sapia:th>
        <sapia:th>Cardinality</sapia:th>
        <sapia:th>Description</sapia:th>
        <tr>
          <td><a href="#Profile" target="main">profile</a></td>
          <td>1 or *</td>
          <td>Defines how the launcher is configured by profile.</td>
        </tr>
      </sapia:table>
    </sapia:sect2>

    <sapia:sect2 title="Rendering Operations">
      <p>When a Java <sapia:command>&lt;launcher&gt;</sapia:command> element is rendered, it performs the following
      operations in order:
        <ol>
          <li>Renders the appropriate <sapia:command>&lt;profile&gt;</sapia:command> child element.</li>
          <li>Adds all the rendered parameters (taking the profile into account) to the current magnet context (for variable interpolation).</li>
          <li>Resolves the <sapia:command>mainClass</sapia:command>, <sapia:command>arguments</sapia:command> and <sapia:command>isDaemon</sapia:command>
              attributes (using variable interpolation).</li>
        </ol>
      </p>
    </sapia:sect2>

    <sapia:sect2 title="Execution Operations">
      <p>Once a Java <sapia:command>&lt;launcher&gt;</sapia:command> element is rendered with success, it is executed according
      to these steps - in the order specified:
        <ol>
          <li>Creates the required classloaders to reflect the classpath hierarchy specified in the configuration (see the
              <a href="./classpath.html#Classloader%20Hierarchy">classpath</a> element documentation for more details).</li>
          <li>Loads the main class using the leaf classloader of the previous step (using reflexion).</li>
          <li>Creates a new thread, setting its name to the name of the launcher, the daemon flag, and context classloader.</li>
          <li>Starts the created thread to asynchronously call the <sapia:command>main()</sapia:command> method of the main class.</li>
        </ol>
      </p>
    </sapia:sect2>

    <sapia:sect2 title="Nested Element Definitions">
      <sapia:sect3 title="Profile">
        <p>The Java <sapia:command>&lt;profile&gt;</sapia:command> element defines the configuration of the
        launcher for a given profile. It provides a way to define parameters specific to this launcher
        and the classpath to use when bootstrapping the main class. This can vary by profile - and is thus
        "profile-aware".
        </p>

        <sapia:sect4 title="Attributes">
          <sapia:table>
            <sapia:th>Name</sapia:th>
            <sapia:th>Description</sapia:th>
            <sapia:th>Required</sapia:th>
            <sapia:th>Interpolation</sapia:th>
            <tr>
              <td>name</td>
              <td>The name of this profile.</td>
              <td>yes</td>
              <td>no</td>
            </tr>
          </sapia:table>
        </sapia:sect4>
        
        <sapia:sect4 title="Child Elements">
          <p>The following lists the possible child xml elements that can hold the Java <sapia:command>profile</sapia:command> element:
          </p>
          <sapia:table>
            <sapia:th>Name</sapia:th>
            <sapia:th>Cardinality</sapia:th>
            <sapia:th>Description</sapia:th>
            <tr>
              <td><a href="./../core/parameters.html" target="main">parameters</a></td>
              <td>0 or 1</td>
              <td>Defines specific parameters that must be used (or overwritten) for the <sapia:command>main()</sapia:command> method's execution.</td>
            </tr>
            <tr>
              <td><a href="./classpath.html" target="main">classpath</a></td>
              <td>1</td>
              <td>Defines the classpath for the <sapia:command>main()</sapia:command> method's execution.</td>
            </tr>
          </sapia:table>
        </sapia:sect4>

        <sapia:sect4 title="Rendering Operations">
          <p>When an java <sapia:command>&lt;profile&gt;</sapia:command> element is rendered, it performs the following
          operations in order:
            <ol>
              <li>Renders the <sapia:command>&lt;parameters&gt;</sapia:command> child element if provided.</li>
              <li>Renders the <sapia:command>&lt;classpath&gt;</sapia:command> child element.</li>
            </ol>
          </p>
        </sapia:sect4>
      </sapia:sect3>
    </sapia:sect2>

    <sapia:sect2 title="Examples">
      <p>This first example shows a basic Java launcher that runs a <sapia:class>HelloWorldApp</sapia:class>  class:
      </p>
      <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="JavaLauncherExample1"
        description="This is a first java launcher example.">
...
    <launcher type="java" name="helloWorld"
              mainClass="org.sapia.magnet.examples.HelloWorldApp"
              args="only an english message">

      <profile name="english">
          <classpath parent="hello_cp">
              <path directory="${user.dir}/lib">
                  <include pattern="**/*.jar" />
              </path>
          </classpath>
      </profile>
    </launcher>
...
</magnet>]]></sapia:code>

      <p>This second example how to start two Java applications with
      a common classpath element that contains common jar files: 
      </p>
      <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="JavaLauncherExample2"
        description="This is a second java launcher example.">

    <parameters>
       <param name="jndi.portNumber" value="1099" />
    </parameters>

    <classpath id="common_cp">
        <path directory="${user.home}/libs/common">
            <include pattern="*.jar" />
        </path>
    </classpath>

    <!-- Define a java launcher that will start the stateless time server. -->
    <launcher type="java" name="timeServer" isDaemon="true" waitTime="5000"
              mainClass="org.sapia.ubik.rmi.examples.time.StatelessTimeServer"
              args="${timeServer.jndiUrlProvider} ${timeServer.jndiInitialFactory}"
              default="local">

        <profile name="local">
              <parameters>
                <param name="timeServer.jndiUrlProvider"
                       value="ubik://localhost:${jndi.portNumber}" />
                <param name="timeServer.jndiInitialFactory"
                       value="org.sapia.ubik.naming.InitialContextFactory" />
              </parameters>
              <classpath parent="common_cp">
                  <path directory="${user.home}/libs/server">
                      <include pattern="*.jar" />
                  </path>
              </classpath>
        </profile>
    </launcher>

    <!-- Define a java launcher that will start the time client application. -->
    <launcher type="java" name="timeClient"
              mainClass="org.sapia.ubik.rmi.examples.time.EndlessTimeClient"
              default="local" waitTime="5000">

        <profile name="local">
            <classpath parent="common_cp">
                <path directory="${user.home}/libs/client">
                    <include pattern="*.jar" />
                </path>
            </classpath>
        </profile>
    </launcher>
...
</magnet>]]></sapia:code>
    </sapia:sect2>
    
  </sapia:sect1>
</sapia:page>