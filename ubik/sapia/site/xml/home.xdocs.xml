<sapia:page title="Ubik" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">
  <sapia:vmenu>
    <sapia:vsection name="Project Home" href="home.html"/>
    <sapia:vsection name="Wiki" href="http://code.google.com/p/sapia/wiki/Ubik"/>
    <sapia:vsection name="RMI" href="rmi.html">
      <sapia:vitem name="For Dummies" href="rmi.html#dummies" />
      <sapia:vitem name="Believing" href="rmi.html#believing" />
      <sapia:vitem name="Architecture" href="architecture.html" />
      <sapia:vitem name="Tutorial" href="tutorial.html" />    
    </sapia:vsection>
    
    <sapia:vsection name="Naming" href="naming.html">
      <sapia:vitem name="Robust Naming" href="naming.html#robust" />
      <sapia:vitem name="Usage" href="naming.html#usage" />
      <sapia:vitem name="Advanced" href="naming.html#advanced" />    
    </sapia:vsection>
    
    <sapia:vsection name="Transports">
      <sapia:vitem name="HTTP" href="transport/http.html" />
      <sapia:vitem name="Mplex" href="transport/mplex.html" />    
    </sapia:vsection>  
    <sapia:vsection name="Javadoc" href="maven/api/index.html"/>
    <sapia:vsection name="Download" href="download.html"/>
    <sapia:vsection name="Mailing List" href="list.html"/>
  </sapia:vmenu>
  <sapia:sect1 title="Ubik">
    <sapia:section>
      <sapia:path name="home" href="../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="ubik" />
    </sapia:section>
    <sapia:sect2 title="Overview">
    
      <p>Ubik aims to provide a set of distributed computing APIs that
      complement Java's current "official" offerings - such as EJB and Jini. 
      The main API of the Ubik project is a RMI-like framework that allows to
      easily and transparently perform method invocations over the wire. The whole process 
      is simplified by (not exclusively): generating stubs dynamically; 
      not enforcing the declaration of remote exceptions.</p>
      
      <p>In a more general fashion, Ubik tries to offer an alternative to the
      complexity of Jini, and to the overkill and limitations of EJB. In the long run, the Ubik project's aim is 
      to make the distribution of objects as transparent as possible, without compromises 
      on scalability, robustness and performance.</p>
      
      <p>In addition, Ubik supports plugging in different transport mechanisms; proof of this
      is its HTTP transport layer: Ubik can even be embedded in a servlet!</p>
      
      <p>Ubik RMI is <b>not</b> an implementation of Java's RMI specification; it is therefore <b>not</b>
      a drop-in replacement of the JDK's RMI implementation.</p>
      
      <sapia:note>Ubik RMI brings you feature-complete, easy remoting, without the burden of an 
      application server.</sapia:note>
      
    </sapia:sect2>
    
    <sapia:sect2 title="Features">
    
      <p>Ubik currently offers APIs that help build distributed applications. These APIs
      can be summarized as follows:</p>
      
      <sapia:sect3 title="Ubik RMI">
        <p>Ubik RMI is similar to the JDK's RMI. Yet it differs from it in many ways. The following
        features illustrate how:</p>
        <ul>
          <li>Dynamically generated stubs (no stub compilation);</li>
          <li>no need to throw <sapia:class>RemoteException</sapia:class>s;</li>
          <li>no need to extend <sapia:class>UnicastRemoteObject</sapia:class>;</li>
          <li>supports colocated method calls (no invocation via network if client and server are in
          the same VM;</li>
          <li>automatic fail-over for stubs that are bound into Ubik JNDI - see next section;</li>
          <li><a href="naming.html#smartstubs">sticky stubs</a> and <a href="naming.html#smartstubs">stateless stubs</a> (that perform round-robin over the different servers);</li>          
          <li>supports client-side and server-side interceptors;</li>
          <li>client-side discovery (naming service is automatically discovered, stateless stubs 
          automatically discover new servers and add them to their round-robin list);</li>
          <li>supports callbacks - very important for scalability;</li>
          <li>isolated transport layer - potentially allowing for RMI over HTTP, UDP, etc.;</li>
          <li>HTTP transport layer provided: you can even embed Ubik in a servlet;</li>          
          <li>inherently secure: Ubik does not support dynamic code download (therefore, no "foreign code" can enter a Ubik server). This greatly
          reduces configuration and security-related hassles (setting setting up a remote distributed codebase, 
          managing security managers and permissions, etc.);</li>
          <li>clean shutdown - incoming request threads are given time to complete;</li>
          <li>performant <!--(25% more raw throughput performance than the JDK's RMI for passed-by-value objects)-->.</li>
        </ul>
      </sapia:sect3>
      
      <sapia:sect3 title="Ubik JNDI">
        Ubik offers a complete JNDI implementation allowing to publish Ubik RMI servers in
        a reliable fashion, using the JNDI's programming model. Multiple Ubik JNDI servers can
        interoperate in a domain to provide reliable access to published services. Ubik JNDI has
        the following features:
        <ul>
          <li>Domain-wide replication of the JNDI tree;</li>
          <li>Ubik RMI stubs that are bound into a Ubik JNDI server are automatically made 
          "naming aware": they will automatically handle fail-over and/or round-robin (depending
          on the type of stub) provided that connection to their server of origin fails;</li>
          <li>allows to bind multiple servers under the same name - essential for scalability;</li>
          <li>client-side discovery of JNDI servers.</li>
          <li>supports <a href="naming.html#attributes">attributes</a> (offers same possibilities as Jini templates).</li>          
        </ul>
      </sapia:sect3>
    </sapia:sect2>    
  </sapia:sect1>
</sapia:page>
