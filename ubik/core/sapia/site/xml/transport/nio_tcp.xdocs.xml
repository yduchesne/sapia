<sapia:page title="NIO/TCP Transport"  cssPath="../css/sapia.css" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">
  <sapia:refreshMenu page="../leftmenu.html" />
  <sapia:sect1 title="NIO/TCP Transport">
    <sapia:section>
      <sapia:path name="home" href="../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="ubik" href="../home.html" />
      <sapia:path name="transport" />
      <sapia:path name="nio over tcp" />
    </sapia:section>  
  
    <sapia:sect-desc>
      <p>The NIO/TCP transport provider would probably be more aptly named the Mina provider, since it is based on 
      <a href="http://mina.apache.org/">Apache Mina</a> (1.1.7).
	  </p>
    </sapia:sect-desc>
    
    <sapia:sect2 title="Exporting a Server">
    
    
      <p>Rather than using a more tedious approach, we recommend you use a <sapia:class link="../maven/api/org/sapia/ubik/rmi/server/transport/nio/tcp/NioServerExporter.html">NioServerExporter</sapia:class>, as follows:</p>
<sapia:code>NioServerExporter exporter = new NioServerExporter();
exporter.setPort(7070);
Hello helloServer = exporter.export(new HelloImpl());</sapia:code>

<p>The above exports the <sapia:class>HelloImpl</sapia:class> instance as a server, using the Mina-based transport. The stub that
is returned by the <sapia:command>export()</sapia:command> method can then be bound to Ubik's JNDI, as such:</p>

<sapia:code>Context context = JNDIContextBuilder.newInstance().domain("myDomain").build();
context.bind("hello", helloServer);</sapia:code>
    </sapia:sect2>
    
  </sapia:sect1>

</sapia:page>
