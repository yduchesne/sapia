<sapia:page title="core:parameters" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform" cssPath="../../css/sapia.css">
  <sapia:sect1 title="parameters">
    <sapia:section>
      <sapia:path name="home" href="../../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="magnet" href="../../home.html" />
      <sapia:path name="manual" href="../home.html#Core%20Elements" />
      <sapia:path name="core" />
      <sapia:path name="parameters" />
    </sapia:section>
    <toc />
        
    <sapia:sect2 title="Overview">
	    <p>The <sapia:command>&lt;parameters&gt;</sapia:command> element defines a group
	    of parameters (child <sapia:command>&lt;param&gt;</sapia:command> elements). 
	    The rationale behind this element is to be able to associate all the variables
	    it contains to a given profile - thus making it <b>profile-aware</b>.
	    </p>
	
	    <p>
	    The profile is specified with the <sapia:command>profile</sapia:command> attribute. 
	    This attribute is optional. If it is not specified, then all the variables the element 
	    contains are considered "global" and they are always rendered and available. If the profile 
	    attribute is specified, the variables the element contains will only be rendered and made 
	    available if the attribute matches the profile that is specified at startup.
	    </p>
    </sapia:sect2>

    <sapia:sect2 title="Attributes">
      <p>The following lists the xml attributes of the <sapia:command>&lt;parameters&gt;</sapia:command> element:
      </p>
	  <sapia:table>
	    <sapia:th>Name</sapia:th>
	    <sapia:th>Description</sapia:th>
	    <sapia:th>Required</sapia:th>
	    <sapia:th>Interpolation</sapia:th>
	    <tr>
	      <td>profile</td>
	      <td>The name of the profile to which this group of parameters will be associated.</td>
	      <td>no</td>
	      <td>no</td>
	    </tr>
	  </sapia:table>
    </sapia:sect2>

    <sapia:sect2 title="Child Elements">
      <p>The following lists the possible child xml elements the <sapia:command>&lt;parameters&gt;</sapia:command> element
      can hold:
      </p>
      <sapia:table>
        <sapia:th>Name</sapia:th>
        <sapia:th>Cardinality</sapia:th>
        <sapia:th>Description</sapia:th>
        <tr>
          <td><a href="#Param" target="main">param</a></td>
          <td>0 or *</td>
          <td>Each param child element defines a given variable.</td>
        </tr>
      </sapia:table>
    </sapia:sect2>


    <sapia:sect2 title="Rendering Operations">
		  <p>When a <sapia:command>&lt;parameters&gt;</sapia:command> element is rendered, it performs the following
		  operations in order:
		    <ol>
		      <li>Renders each <sapia:command>param</sapia:command> definition it contains. A <sapia:command>param</sapia:command> will be rendered only if 
		        the evaluation of the conditionnal attributes <sapia:command>if</sapia:command> <b>or</b> <sapia:command>unless</sapia:command> is true; otherwise 
		        the <sapia:command>param</sapia:command> is skipped and the rendering process goes on to the next one.</li>
		      <li>Adds each param to the Magnet's context or to the system properties (depending on the scope).</li>
		    </ol>
		  </p>
    </sapia:sect2>

    <sapia:sect2 title="Examples">
		  <p>This first example defines a parameters element that would contains global variables.</p>
		  <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="ParametersExample1"
        description="This is a simple example.">
...
    <parameters>
        ...
    </parameters>
...
</magnet>]]></sapia:code>

		  <p>This second example defines a parameters element that would contain variables associated
		  to a "dev" profile.</p>
		  <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="ParametersExample2"
        description="This is a second example.">
...
    <parameters profile="dev">
        ...
    </parameters>
...
</core:magnet>]]></sapia:code>

    </sapia:sect2>

	  <sapia:sect2 title="Nested Element Definition">
      <sapia:sect3 title="Param">
        <p>The <sapia:command>&lt;param&gt;</sapia:command> element defines a parameter (which can later 
        be referred to as a variable) containing a value that may be referenced in a Magnet configuration file. 
        This element is always nested within a <sapia:command>&lt;parameters&gt;</sapia:command> element and 
        basically consists of a name-value pair. Because it is alway within a <sapia:command>&lt;parameters&gt;</sapia:command>
        element, the value of a variable will be assigned (or not) according to the profile specified for that element;
        variables of "default" parameters will always be rendeder and variables of a specific profile will
        only be rendered if that profile was specified at startup.
        </p>

        <p>If a variable is defined more than once for different <sapia:command>&lt;parameters&gt;</sapia:command>,
        the value of that variable can be overridden, meaning the value of the variable will change
        according to the profile in the context of which the Magnet configuration is run. If a variable is defined globally
        (not associated to a profile) and the same variable is defined for a specific profile, the
        value of the variable will be the one corresponding to the profile - if it matches it profile name specified at
        startup.
        </p>

        <p>The value of a variable can contain another variable name using the notation
        <sapia:command>${variable_name}</sapia:command>. The only care to take in that situation is to
        make sure that the variable it refers to is already defined. Since the variables are processed
        sequentially in Magnet, you would need to define your <sapia:command>&lt;param&gt;</sapia:command>
        element before you use the variable in the value of another.
        </p>

        <p>Each variable that is defined in a Magnet configuration file can "reside" in virtually two
        places. The scope attribute of the <sapia:command>&lt;param&gt;</sapia:command> element provides
        a way to define where we want a variable to reside. Two values are possible for that attribute:
        <ul>
            <li><b>magnet</b> - The variable will be added to the Magnet's context and the value will
            only be accessible from within that Magnet.</li>
            <li><b>system</b> - The variable will be added to the Java system properties and the
            value will be accessible using <sapia:command>System.getProperty(...)</sapia:command>.</li>
        </ul>
        </p>

        <sapia:note>
          When a variable is resolved using the interpolation mechanism, Magnet always looks in it's
          context first. If it is not present, it will then look up the system properties.
        </sapia:note>

        <sapia:sect4 title="Attributes">
          <p>The following lists the xml attributes of the <sapia:command>&lt;param&gt;</sapia:command> element:
          </p>
          <sapia:table>
            <sapia:th>Name</sapia:th>
            <sapia:th>Description</sapia:th>
            <sapia:th>Required</sapia:th>
            <sapia:th>Interpolation</sapia:th>
            <tr>
              <td>name</td>
              <td>The name of the variable to define.</td>
              <td>yes</td>
              <td>no</td>
            </tr>
            <tr>
              <td>value</td>
              <td>The value to assign to this variable.</td>
              <td>yes</td>
              <td>yes</td>
            </tr>
            <tr>
              <td>scope</td>
              <td><p>The scope of a variable can only be "magnet" or "system". If this attribute
              is omitted, the scope defaults to "magnet".</p>
              </td>
              <td>no</td>
              <td>yes</td>
            </tr>
            <tr>
              <td>if</td>
              <td><p>Condition that makes this variable effective only if the value represents a
              variable name that has a value in Magnet's context or in the system properties.</p>
              </td>
              <td>no</td>
              <td>yes</td>
            </tr>
            <tr>
              <td>unless</td>
              <td><p>Condition that makes this variable effective only if the value represents a
              variable name that does NOT have a value in the Magnet's context or in the system properties.</p>
              </td>
              <td>no</td>
              <td>yes</td>
            </tr>
          </sapia:table>
        </sapia:sect4>

        <sapia:sect4 title="Rendering Operations">
          <p>When a <sapia:command>&lt;param&gt;</sapia:command> element is rendered, it performs the following
          operations in order:
            <ol>
              <li>Resolves the <sapia:command>value</sapia:command>, <sapia:command>scope</sapia:command>, <sapia:command>if</sapia:command> 
              and <sapia:command>unless</sapia:command> attributes (using variable interpolation).</li>
            </ol>
          </p>
        </sapia:sect4>

        <sapia:sect4 title="Param Examples">
          <p>This first example defines two sets of the same variables: foo and username. The example shows
          how to use Magnet's variable overload feature. If that Magnet would be run under the "dev"
          profile, the value of the <sapia:command>foo</sapia:command> variable would be <sapia:command>bar2</sapia:command>, 
          otherwise the value of the variable would be <sapia:command>bar</sapia:command>.</p>
          <sapia:code><![CDATA[
<magnet xmlns="http://schemas.sapia-oss.org/magnet/core/"
        name="ParamExample1"
        description="This is a simple example.">
...
    <parameters>
        <param name="foo"      value="bar" />
        <param name="username" value="scott" />
    </parameters>

    <parameters profile="dev">
        <param name="foo"      value="bar2" />
        <param name="username" value="developer" />
    </parameters>
...
</magnet>]]></sapia:code>

          <p>This second example shows how to export variables to the Java system properties using
          the scope attribute. In that example the hostname variable would be added the the system
          properties. The result is the same as adding the argument <sapia:command>-Dhostname=myhost.mydomain.com</sapia:command>
          to the command line when invoking a java VM.</p>
          <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="ParamExample2"
        description="This is a second example.">
...
    <parameters>
        <param name="hostname" value="myhost.mydomain.com" scope="system" />
        <param name="port"     value="80" />
    </parameters>
...
</magnet>]]></sapia:code>

          <p>In this third example we see that the <sapia:command>server.url</sapia:command> variable
          incorporates other variables in its own value. When we run that magnet for the dev profile, the
          <sapia:command>server.url</sapia:command> variable would have the value
          <sapia:command>http://192.168.57.100:80</sapia:command>.
          </p>
          <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="ParamExample3"
        description="This is a third example.">
...
    <parameters>
        <param name="server.port" value="80" />
    </parameters>

    <parameters profile="dev">
      <param name="server.ip"  value="192.168.57.100" />
      <param name="server.url" value="http://${server.ip}:${server.port}" />
    </parameters>
...
</magnet>]]></sapia:code>

          <p>In this fourth example we are using the <sapia:command>if</sapia:command> and
            <sapia:command>unless</sapia:command> attributes to perform conditional variable
            assignment. The first variable, <sapia:command>magnet.home</sapia:command>, will
            be assigned the value of <sapia:command>user.dir</sapia:command> 
            <b>only if</b> it was not previously set and a
            <sapia:command>msg</sapia:command> variable will be assigned the value
            "<sapia:command>Using the provided magnet.home</sapia:command>" if the variable
            <sapia:command>magnet.home</sapia:command> is set.
          </p>
          <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="ParamExample3"
        description="This is a third example.">
...
    <parameters>
        <param name="magnet.home" value="${user.dir}"
               unless="magnet.home" scope="system"/>
        <param name="msg" value="Using the provided magnet.home"
               if="magnet.home" scope="system"/>
    </parameters>
...
</magnet>]]></sapia:code>
        </sapia:sect4>

      </sapia:sect3>

	  </sapia:sect2>

  </sapia:sect1>
</sapia:page>