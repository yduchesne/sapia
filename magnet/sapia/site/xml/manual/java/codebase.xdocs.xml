<sapia:page title="java:codebase" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform" cssPath="../../css/sapia.css">
  <sapia:sect1 title="codebase">

    <sapia:section>
      <sapia:path name="home" href="../../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="magnet" href="../../home.html" />
      <sapia:path name="manual" href="../home.html#Java%20Elements" />
      <sapia:path name="java" />      
      <sapia:path name="codebase" />
    </sapia:section>

    <toc />
        
    <sapia:sect2 title="Overview">
      <p>
        The <sapia:command>&lt;codebase&gt;</sapia:command> element provides a convenient way to define the
        <sapia:command>java.rmi.server.codebase</sapia:command> system property . For programmers who are using
        Remote Method Invocation (RMI) and need to load classes from a remote host, the  <sapia:command>&lt;codebase&gt;</sapia:command>
        element builds on the notion of "path element" to elegantly define the list of jar files or remote resources
        that are needed.
      </p>
      <p>
        The <sapia:command>&lt;codebase&gt;</sapia:command> element is <b>profile-aware</b>, which means that your
        Magnet configuration file can contain more than one codebase definition, each for a specific profile. 
        At runtime, Magnet will process the codebase for the default profile and the codebase for the profile specified 
        at startup. You can therefore have a common codebase and some specific ones, according to your needs. 
      </p>
    </sapia:sect2>
        
    <sapia:sect2 title="Attributes">
      <p>
        The following lists the xml attributes of the <sapia:command>codebase</sapia:command> element:
      </p>
      <sapia:table>
        <sapia:th>Name</sapia:th>
        <sapia:th>Description</sapia:th>
        <sapia:th>Required</sapia:th>
        <sapia:th>Interpolation</sapia:th>
        <tr>
          <td>profile</td>
          <td>The name of the profile associated with the codebase definition.</td>
          <td>no</td>
          <td>no</td>
        </tr>
      </sapia:table>
    </sapia:sect2>
    
    <sapia:sect2 title="Child Elements">
      <p>The following lists the possible child xml elements that can hold the <sapia:command>codebase</sapia:command> element:
      </p>
      <sapia:table>
        <sapia:th>Name</sapia:th>
        <sapia:th>Cardinality</sapia:th>
        <sapia:th>Description</sapia:th>
        <tr>
          <td><a href="./../core/path.html" target="main">path</a></td>
          <td>1 or *</td>
          <td>Defines the resources of this codebase.</td>
        </tr>
      </sapia:table>
    </sapia:sect2>

    <sapia:sect2 title="Rendering Operations">
      <p>When a <sapia:command>&lt;codebase&gt;</sapia:command> element is rendered, it performs the following
      operations in order:
        <ol>
          <li>Renders all the <sapia:command>&lt;path&gt;</sapia:command> child elements.</li>
          <li>Generates and sets the value of the system property <sapia:command>java.rmi.server.codebase</sapia:command>
          according to the resources selected by the path element.</li>
        </ol>
      </p>

      <sapia:note>It is important to note that Magnet will not overwrite the <sapia:command>java.rmi.server.codebase</sapia:command>
      system property but append the generated string to it.
      </sapia:note>      
    </sapia:sect2>

    <sapia:sect2 title="Examples">
      <p>This first example creates a <sapia:command>codebase</sapia:command> element that will contain some jar files from a remote server:
      </p>
      <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="CodebaseExample1"
        description="This is a first codebase example.">
...
    <codebase>
        <path protocol="http" host="sources.acme.com" directory="/libs/thirdParty">
            <include pattern="client-api.jar" />
            <include pattern="esb-stubs.jar" />
        </path>
    </codebase>
...
</magnet>]]></sapia:code>

      <p>This second example shows how you can have a common codebase (no profile attribute defined) along
      with some other codebase that are specific to some profiles.
      </p>
      <sapia:code><![CDATA[
<magnet xmlns:magnet="http://schemas.sapia-oss.org/magnet/"
        name="CodebaseExample1"
        description="This is a first codebase example.">
...
    <codebase>
        <path protocol="http" host="sources.acme.com" directory="/libs/thirdParty">
            <include pattern="client-api.jar" />
            <include pattern="esb-stubs.jar" />
        </path>
    </codebase>

    <codebase profile="dev">
        <path protocol="http" host="sources.acme.com" directory="/libs/devSnapshot">
            <include pattern="my-server.jar" />
        </path>
    </codebase>

    <codebase profile="qa">
        <path protocol="http" host="sources.acme.com" directory="/libs/qaStaging">
            <include pattern="my-server.jar" />
        </path>
    </codebase>

    <codebase profile="prod">
        <path protocol="http" host="sources.acme.com" directory="/libs/release">
            <include pattern="my-server.jar" />
        </path>
    </codebase>
...
</magnet>]]></sapia:code>

    </sapia:sect2>

  </sapia:sect1>
</sapia:page>
