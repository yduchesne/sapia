<sapia:page title="Soto JMX" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">

  <sapia:vmenu>
    <sapia:vsection name="Project Home" href="home.html"/>
    <sapia:vsection name="Javadoc" href="maven/api/index.html"/>
    <sapia:vsection name="Maven" href="maven/index.html"/>
  </sapia:vmenu>


  <sapia:sect1 title="The JMX Layer">
    <sapia:section>
      <sapia:path name="home" href="http://www.sapia-oss.org/home.html" />
      <sapia:path name="projects" />
      <sapia:path name="soto" href="../../home.html" />
      <sapia:path name="jmx" />  
    </sapia:section>
    
    <toc/>

    <sapia:sect2 title="Overview">
      <sect-desc>
        <p>A JMX layer can be applied to a Soto service in order to obtain, with minimal hassle, a MBean that
        is bound to an internal MBean server and allows to eventually administer the service remotely - 
        a MBean server corresponding to a given JMX domain can be published on the network in order to be 
        remotely administered (see the <a href="#exporting">Remote administration</a> section for more details).</p>
        
        <p>For a service to be manageable (from the JMX spec point of view), it must have methods that respect
        the spec's conventions with regards to attributes and operations. For example, a service with methods
        setName() and getName() as a "Name" attribute that is available for read and write; the setName() only would
        match to a "Name" attribute in write mode; the getName() only would match to a "Name" attribute in read-only
        mode. An additional requirement is that the methods corresponding to MBean attributes be public.</p>
        
        <p>For operations, any public method is "publisheable" as a MBean operation.</p>
      </sect-desc>
    </sapia:sect2>
    
    <sapia:sect2 title="Specification">
      <sect-desc>
        <p>A JMX layer is applied to a Soto service by defining a <sapia:command>jmx:mbean</sapia:command>
        element under the <sapia:command>soto:service</sapia:command> element that corresponds to the 
        desired service. The <sapia:command>jmx:mbean</sapia:command> element encapsulates other elements,
        intended to provide information pertaining to the service (information that is eventually displayed
        in a JMX-enabled administration console). As you will see, it is possible to include and exclude
        attributes and operations using a convenient pattern-matching notation.</p>
        <p>In addition, .
        </p>
      </sect-desc>
    
      <sapia:sect3 title="Configuration">
        <p><b>Prefix</b>: jmx</p>
        <p><b>Namespace</b>: soto:jmx</p>
        <p><b>Object Definitions</b>:</p>
      </sapia:sect3>
      
      <sapia:sect3 title="Elements">
        <sapia:sect4 title="jmx:mbean">
          <p><i>Description</i>: applies a JMX layer to a service. A MBean is automatically created for the service
          and bound to the MBean server.</p>
          <p><i>Children</i>: <a href="#operations">operations</a>, <a href="#attributes">attributes</a>.</p>
          <sapia:table>
            <sapia:th>Attribute</sapia:th>
            <sapia:th>Description</sapia:th>
            <sapia:th>Mandatory</sapia:th>
           
            <tr>
              <td valign="top">description</td>
              <td valign="top">Defines the description on the MBeanInfo instance that will correspond to the MBean created for the service instance
              to which the layer is applied.</td>
              <td valign="top">false</td>
            </tr>
            <tr>
              <td valign="top">domain</td>
              <td valign="top">Defines the domain (as per the JMX spec) of the MBeanServer to which the created MBean will be associated.</td>
              <td valign="top">false (defaults to <sapia:command>DefaultDomain</sapia:command>).</td>             
            </tr>
          </sapia:table>
        </sapia:sect4>

        <sapia:sect4 title="attributes">
          <p><i>Description</i>: Encapsulates attributes to include and exclude into/from the MBean</p>
          <p><i>Children:</i> <a href="#include">include</a>, <a href="#exclude">exclude</a></p>        
          <!--sapia:table>
            <sapia:th>Element Name</sapia:th><sapia:th>Attr</sapia:th>
          </sapia:table-->
        </sapia:sect4>
        
        <sapia:sect4 title="operations">
          <p><i>Description</i>: encapsulates operations to include and exclude into/from the MBean</p>
          <p><i>Children</i>: <a href="#include">include</a>, <a href="#exclude">exclude</a></p>        
          <!--sapia:table>
            <sapia:th>Element Name</sapia:th><sapia:th>Attr</sapia:th>
          </sapia:table-->
        </sapia:sect4>        
        
        <sapia:sect4 title="include">
          <p><i>Description</i>: This element specifies which MBean operations or attributes must be part of
          the MBean.</p>
          <p>When specified within an <sapia:command>attributes</sapia:command> element, this element's child 
          elements and attributes must correspond to the <a href="#attribute_include_exclude">attribute include/exclude spec</a>.</p>
        </sapia:sect4>

        <sapia:sect4 title="exclude">
          <p><i>Description</i>: This element specifies which MBean operations or attributes must be excluded
          from the MBean.</p>
          <p>When specified within an <sapia:command>operations</sapia:command> element, this element's child 
          elements and attributes must correspond to the <a href="#operation_include_exclude">operation include/exclude spec</a>.</p>
        </sapia:sect4>        
        
        <sapia:sect4 title="operation include/exclude" alias="operation_include_exclude">
          <p><i>Description</i>: Specifies an operation, or set of operations. In this case, an operation corresponds
          to the method of a service that matches the definition of a MBeanOperation, from the JMX
          spec's point of view.</p>
          
          <p><i>Child</i>: <a href="param">param</a></p>   
          <sapia:table>
            <sapia:th>Attribute</sapia:th>
            <sapia:th>Description</sapia:th>
            <sapia:th>Mandatory</sapia:th>
            <tr>
              <td valign="top">name</td>
              <td valign="top">A name pattern specifying to which operations the information provided by this element will
              apply. The pattern notation supports the '*' character to specify patterns. For example,
              do* would match do() and doSomething(), do*thing() would match doSomething(), *doSomething()
              would match pleaseDoSomething() and doSomething(), and so on. Pattern matching is case-<b>in</b>sensitive.</td>
              <td valign="top">true</td>
            </tr>
            <tr>
              <td valign="top">sig</td>
              <td valign="top">Specifies a Java method signature that this element must match; the value of this
              attribute is given as a comma-delimited list of Java parameter types - this list can take
              patterns. Pattern matching is case-<b>in</b>sensitive.
              <p/>
              For example, the following list: 'java.lang.*, org.stuff.Widget' would match
              any method with the first parameter from the java.lang package, and the second of
              type org.stuff.widget. 
              <p/>
              The following: '*, org.stuff.*' would match any method with
              a first parameter of any type, and the second one from the org.stuff package. To
              match, for example, any type from org.stuff and all of its subpackages, the following
              would be used: 'org.stuff.**'
              <p/>
              <b>IMPORTANT</b>: if this attribute is omitted, the element will match any method  
              whose name matches the pattern specified by the <sapia:command>name</sapia:command>
              attribute. To match a no-args method, this attribute's value must correspond to an 
              empty string.</td>
              <td valign="top">false</td>
            </tr>
          </sapia:table>
        </sapia:sect4>

        <sapia:sect4 title="attribute include/exclude" alias="attribute_include_exclude">
          <p><i>Description</i>: Specifies an attribute, or set of attributes. In this case, an attribute corresponds
          to the method of a service that matches the definition of a MBeanAttribute, from the JMX
          spec's point of view.</p>
          <sapia:table>
            <sapia:th>Attribute</sapia:th>
            <sapia:th>Description</sapia:th>
            <sapia:th>Mandatory</sapia:th>
            <tr>
              <td valign="top">name</td>
              <td valign="top">A name pattern specifying to which attributes the information provided by this element will
              apply. The pattern notation supports the '*' character to specify patterns. For example,
              *name would match setName() and setFirstName(). Pattern matching is case-<b>in</b>sensitive. 
              <p/>
              <b>IMPORTANT</b>: patterns should be given without the set/get prefix. Thus, to match an underlying
              setName() method, use 'name' as a value.
              </td>
              <td valign="top">true</td>
            </tr>
            <tr>
              <td valign="top">writable</td>
              <td valign="top">must be <sapia:command>true</sapia:command> or <sapia:command>false</sapia:command>;
              if <sapia:command>false</sapia:command>, then the corresponding MBean attribute descriptor's "writable"
              flag will be set accordingly. If <sapia:command>true</sapia:command>, there must be a corresponding
              setter, otherwise the attribute will have no effect.</td> 
              <td valign="top">false</td>
            </tr>            
            <!--tr>
              <td>sig</td>
              <td>Specifies a Java method signature that this element must match; the value of this
              attribute is given as a comma-delimited list of Java parameter types - this list can take
              patterns. 
              <p/>
              For example, the following list: 'java.lang.*, org.stuff.Widget' would match
              any method with the first parameter from the java.lang package, and the second of
              type org.stuff.widget. 
              <p/>The following: '*, org.stuff.*' would match any method with
              a first parameter of any type, and the second one from the org.stuff package. To
              match, for example, any type from org.stuff and all of its subpackages, the following
              would be used: 'org.stuff.**'. Pattern matching is case-<b>in</b>sensitive.
              <p/>
              <b>IMPORTANT</b>if this attribute is omitted, the element will match any method  
              whose name matches the pattern specified by the <sapia:command>name</sapia:command>
              attribute. To match a no-args method, this attribute's value must correspond to an 
              empty string.</td>
              <td>false</td>
            </tr-->
          </sapia:table>
        </sapia:sect4>

        <sapia:sect4 title="param">
          <p><i>Description</i>: Intended to provide a name and description to the parameters of an operation - or 
          set of operations. Used within an <a href="#operation_include_exclude">include</a>, which may contain more than one 
          <sapia:command>param</sapia:command> element. It is mandatory that an <sapia:command>include</sapia:command> 
          element matching operations has as many <sapia:command>param</sapia:command> elements as present in the matching
          operations as the latter have parameters in their signature, otherwise the <sapia:command>param</sapia:command> 
          elements will have no effect.</p>
          
          <p><i>Child</i>: <a href="param">param</a></p>   
          <sapia:table>
            <sapia:th>Attribute</sapia:th>
            <sapia:th>Description</sapia:th>
            <sapia:th>Mandatory</sapia:th>
            <tr>
              <td valign="top">name</td>
              <td valign="top">The parameter's name - used for display/information purposes.</td>
              <td valign="top">false</td>
            </tr>
            <tr>
              <td valign="top">description</td>
              <td valign="top">The parameter's description - used for display/information purposes.</td>
              <td valign="top">false</td>
            </tr>            
          </sapia:table>
        </sapia:sect4>            
      </sapia:sect3>
    </sapia:sect2>
    <sapia:sect2 title="Example">
       <sapia:sect3 title="Publishing a Service as a MBean">
         <p>Given the following service (we omit the code details and only provide the signature):</p>
          
<sapia:code>
package org.somecorp.humanresources;

public CompanyServiceImpl implements CompanyService{
  
  public int getUniqueId();
  public String getStreet(){}
  public String getStreetNumber(){}
  public String getName(){}
  public void setName(String names){}
  public Iterator getEmployeesFor(String query){}
  public void addEmployee(Employee empl);
  public void addEmployee(String firstName, 
                          String lastName, 
                          int age);
  public void addEmployee(Name firstName, 
                          Name lastName, 
                          int age);                          
  
  public void init() throws Exception;
  public void start() throws Exception;

}
</sapia:code>
        
        <p>The service can be published as a MBean by applying a JMX layer to it. The following
        illustrates how this is done (the <sapia:command>jmx:mbean</sapia:command> element must be right under
        the service's corresponding <sapia:command>soto:service</sapia:command> element):</p>

<sapia:code><![CDATA[<jmx:mbean description="A Service that does not do much">
  <attributes>
  
    <!-- The presence of this single element 
         does not mean that only the 'Name'
         attribute will be included - all 
         attributes are included by default; 
         the include here only means that the 
         given description will be assigned to 
         it. We use an include to override an 
         exclude, or to assign information 
         pertaining to the matched attributes - 
         the same rule applies for operations. -->
         
    <include name="name" 
             description="Company Name" 
             writable="false" />
  </attributes>
  <operations>
  
    <!-- the elements below exclude every operation
         except the addEmployee() methods whose 
         signature matches the given signature
         patterns. -->
         
    <include name="addEmployee" 
             description="Adds an employee" 
             sig="*, *, int">
      <param name="First Name" />
      <param name="Last Name" />
      <param name="Age" />      
    </include>
    <exclude name="*"/>
  </operations>
</jmx:mbean>]]></sapia:code>          
        
        <p>To better understand the above, the following rules should be taken into account</p>
        
        <ul>
          <li><b>All attributes and operations are included by default</b>: the methods (corresponding to
          attributes and operations) that should not be access through the JMX API must be specifically 
          excluded with <sapia:command>exclude</sapia:command> elements.</li>
          <li>The corrollary to the above is that <b>operations and attributes need not being included explicitely</b>.</li>          
          <li><b>If no <sapia:command>description</sapia:command> attribute is provided</b> for the 
          <sapia:command>jmx:bean</sapia:command> element, or the <sapia:command>include</sapia:command>,
          <sapia:command>exclude</sapia:command> and <sapia:command>param</sapia:command> elements, 
          then a default description is assigned (the description is actually: "No description available").</li>
          <li><b>If an attribute or operation is matched by both an include and an exclude</b>, the include
          prevails.</li>
          
        </ul>
        
       </sapia:sect3>
    </sapia:sect2>      
    
    <sapia:sect2 title="Remote Administration" alias="exporting">
      <p>If you deploy your service (and associated MBean) within a J2EE container, the container most likely 
      already offers remote administration (that is, your MBean are registered with a MBeanServer implementation
      that is managed by the container, and made available by it for remote administration).</p>
      
      <p>But if you deploy your service as part of a stand-alone Java application, you can make use of Soto's
      integration of the <a href="http://mx4j.sourceforge.net/">MX4J</a> framework. Soto has integrated support 
      for remote administration through MX4J's JRMP adaptor, which publishes MBeanServers using the JDK's RMI implementation.</p>
      
      <sapia:note>
      On the client side, you can use <a target="mc4j" href="http://mc4j.sourceforge.net/">MC4J</a> or EJTools'
      <a target="mc4j" href="http://www.ejtools.org/applications/jmx.browser/screenshots.html">JMXBrowser</a>. Soto's distribution
      comes with a JMX demo that uses the latter. For details on how to run the demo, have a look at the
      README.txt file in the root of Soto's distribution.
      </sapia:note>
      
      <p>The example below shows how to setup MX4J as part of a Soto application:</p>

<sapia:code><![CDATA[...
  <soto:service>
    <jmx:mx4j />
  </soto:service>
...]]></sapia:code>
   
      <p>The <sapia:command>jmx:mx4j</sapia:command> tag creates an instance of the 
      <sapia:class link="../api/org/sapia/soto/jmx/mx4j/Mx4jService.html">Mx4jService</sapia:class> class.
      The above exports the MBeanServer on JMX's default domain as an RMI server. If you wish to export
      a MBeanServer that corresponds to another domain, you can do so as follows:</p>
    
<sapia:code><![CDATA[...
  <soto:service>
    <jmx:mx4j domain="sample"/>
  </soto:service>
...]]></sapia:code>
        
      <p>The above makes sense if you have configured MBeans as part of an explicit domain, such as
      in the example below:</p>

<sapia:code><![CDATA[...
  <soto:service>
    <jmx:mbean domain="sample">
      ...
    </jmx:mbean>
    <sample:myService />
  </soto:service>
...]]></sapia:code>

      <p>Internally, an Mx4jService instance creates a RMI registry that listens on the default 1099 port. 
      A stub corresponding to the exported MBeanServer is bound to the registry, using the <sapia:command>Mx4jService</sapia:command>
      name, by default. In order to be able to administer the MBeanServer, client applications have to look it up from
      the registry (by connecting on the appropriate port, and using the configured name).</p>
      <p>If you publish multiple MBeanServers belonging to different domains, you have to modify the ports accordingly. In
      addition, you could optionally modify the name under which a MBeanServer is bound; the 
      <sapia:command>jmx:mx4j</sapia:command> tag offers such possibilities:</p>
      
<sapia:code><![CDATA[...
  <soto:service>
    <jmx:mx4j domain="sample" 
              port="1100" 
              jndiName="SomeMBeanServer" />
  </soto:service>
...]]></sapia:code>     

    </sapia:sect2>    
  </sapia:sect1>
</sapia:page>
