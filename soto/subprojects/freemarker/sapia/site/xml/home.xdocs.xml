<sapia:page title="Freemarker Service" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">
  <sapia:vmenu>
    <sapia:vsection name="Project Home" href="index.html"/>
    <sapia:vsection name="Javadoc" href="maven/api/index.html"/>
    <sapia:vsection name="Maven" href="maven/index.html"/>
  </sapia:vmenu>

  <sapia:sect1 title="Freemarker Service">
    <sapia:section>
      <sapia:path name="home" href="http://www.sapia-oss.org/home.html" />
      <sapia:path name="projects" />
      <sapia:path name="soto" href="../../index.html" />
      <sapia:path name="services" />
      <sapia:path name="freemarker" />      
    </sapia:section>
    <toc/>
    <sapia:sect2 title="Overview">
    
      <p>This suproject integrates the <a href="http://freemarker.sf.net" target="fmk_site">Freemarker</a> templating framework through the 
      <sapia:class link="maven/api/org/sapia/soto/freemarker/FreemarkerService.html" target="fmk_service">FreemarkerService</sapia:class> 
      interface, which specifies template-resolving methods.</p>

      <p>The <sapia:class link="maven/api/org/sapia/soto/freemarker/FreemarkerServiceImpl.html" target="fmk_service">FreemarkerServiceImpl</sapia:class> 
      class is a Soto service implementing the above interface. It initializes the Freemarker configuration and keeps it to resolve the requested
      templates.</p>
    </sapia:sect2>

    <sapia:sect2 title="Usage">    

      <sapia:sect3 title="Configuring">
      <p>The example below demonstrates how to configure the Freemarker service:</p>

<sapia:code>
<![CDATA[  xmlns:soto="sapia:soto"
  xmlns:freemarker="soto:freemarker">

  <soto:service>
    <freemarker:configuration 
      localized="false"
      updateDelay="10000">
      
      <root>file:${user.dir}/etc/freemarker/templates</root>
      
      <setting name="locale" 
               value="en" />
               
    </freemarker:configuration>
  </soto:service>  

</soto:app>]]>
</sapia:code>

      <p>The Freemarker service supports the following attributes and elements   :</p>
      <ul>
        <li><b>localized</b>: indicates if template resolution should be done according to Freemarker's locale-based
        lookups.</li>
        
        <li><b>updateDelay</b>: the delay (in millis) after which templates are refreshed by Freemarker (defaults to 0, which means
        that templates are parsed at every resolution).</li>        

        <li><b>root (0-*)</b>: a path to a resource relatively to which template resolution must be performed. All such
        configured resources will be searched in the order in which they are specified, before Soto's regular resource resolution
        is performed - if no such root resources are specified, then resolution defaults to Soto's regular resource resolution 
        scheme.</li>

        <li><b>setting (0-*)</b>: defines a Freemarker setting (such as done in Freemarker using the <sapia:command>#setting</sapia:command>
        directive.</li>
      </ul>
      </sapia:sect3>
      <sapia:sect3 title="Programming">
        <p>The Template service is of course meant to be used by your application services. Here's an example:</p>

<sapia:code>
import org.sapia.soto.Service;
import org.sapia.soto.EnvAware;
import org.sapia.soto.freemarker.FreemarkerService;

public class MyService implements Service, EnvAware{

  private Env _env;
  private FreemarkerService _fmk;

  public void setEnv(Env env){  
    _env = env;
  }

  public void setFreemarker(FreemarkerService freemarker){
    _fmk = freemarker;
  }

  public void init() throws Exception{
    if(_fmk == null){
      _fmk = _env.lookup(FreemakerService.class);
    }
  }

  public void start(){}
  public void dispose(){}

}
</sapia:code>

        <p>As can be seen, we perform an interface-based lookup through Soto's environment if no Freemarker service instance
        has been injected.</p>
        
      </sapia:sect3>
      <sapia:sect3 title="Template Resolution">
        <p>The Freemarker service uses Soto's resource-resolving scheme to retrieve Freemarker template sources. More concretely, the
        service uses Soto's <sapia:class>Env</sapia:class> interface to perform such resolution.</p>
        
        <p>If templates must be retrieved relatively to other resources, then (as was mentioned in the preceding section), 
        corresponding <sapia:command>root</sapia:command> elements can be specified in the configuration. Any resource that is specified
        must take a scheme that can be interpreted by Soto (<sapia:command>file</sapia:command>, <sapia:command>resource</sapia:command>,
        <sapia:command>http</sapia:command>, or any scheme corresponding to a resource handler that you may have configured).</p>
        
      </sapia:sect3>
     
    </sapia:sect2>
  </sapia:sect1>
</sapia:page>
