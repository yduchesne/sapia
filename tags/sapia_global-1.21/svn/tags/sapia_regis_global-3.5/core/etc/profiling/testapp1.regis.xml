<registry>
<node name="test">
    <node name="testapp1" operation="update-overwrite">
      <node name="domains">
        <choose>
          <when param="corus.server.domain" matches="local">
            <node name="database">            
              <link path="test/databases/local" />
              <property name="url" value="${baseUrl}testapp1" />              
            </node>
          </when>
          <when param="corus.server.domain" matches="testapp1-qa-*">
            <node name="database">            
              <link path="test/databases/000" />
              <property name="url" value="${baseUrl}testapp1" />              
            </node>
          </when>
          <when param="corus.server.domain" matches="testapp1-prod-*">
            <node name="database">            
              <link path="test/databases/000" />
              <property name="url" value="${baseUrl}testapp1" />              
            </node>
          </when>
          <when param="corus.server.domain" matches="testapp1-eu-*">
            <node name="database">            
              <link path="test/databases/001" />
              <property name="url" value="${baseUrl}testapp1" />              
            </node>
          </when>
        </choose>
      </node>
	    
	    <!-- ======================= DATABASE ======================= -->
	    <!-- 
	    this node is configured to correspond to the "current" testapp1
	    database.
	    -->

      <choose>
        <when param="test.env.type" value="local">
          <node name="database" id="testapp1-database">
            <link path="test/databases/local" />
            <property name="url" value="${baseUrl}testapp1" />
          </node>
        </when>
        <when param="test.env.type" value="dev">
          <node name="database" id="testapp1-database">
            <link path="test/databases/dev" />
            <property name="url" value="${baseUrl}testapp1" />
          </node>
        </when>
        <otherwise>
          <node name="database" id="testapp1-database">
            <link path="test/testapp1/domains/database" />
            <property name="url" value="${baseUrl}testapp1" />
          </node>
        </otherwise>
      </choose>
      
	    <!-- ======================= SERVICES ======================== -->
	    <!-- this section maps testapp1 services JNDI name -->

      <node name="services">
        <node name="jndi">
          <property name="service1" value="testapp1/1" />
          <property name="service2" value="testapp1/2" />
          <property name="service3" value="testapp1/3" />
        </node>
      </node>      
	  
	    <!-- ========================= COMMON ========================= -->
      <choose>
        <when param="test.env.type" value="local">
          <node name="common" id="testapp1-common">
            <property name="url" value="http://localhost:9090" />
          </node>
        </when>
        <when param="test.env.type" value="dev">
          <node name="common" id="testapp1-common">
            <property name="url" value="http://dev:9090" />
          </node>
        </when>
        <otherwise>
          <node name="common" id="testapp1-common">
            <property name="url" value="http://prod:9090" />
          </node>
        </otherwise>
      </choose>
	  
      <node name="webapp">
        <node name="database">
          <link path="test/testapp1/database" />
        </node>
        
        <node name="smtp">
          <link path="test/smtp" />
        </node>

        <node name="database">
          <link path="test/testapp1/database" />
        </node>

        <node name="freemarker">
          <link path="test/freemarker" />
        </node>

        <node name="logging">
          <link path="test/logging" />
          <property name="fileName" value="webapp" />
          <property name="dirName" value="${user.dir}/logs" />
        </node>

        <node name="general">
          <link ref="testapp1-common" />
          <property name="publicUrl" value="${url}" />
        </node>
      </node>
	    
      <node name="adminconsole">
        <node name="smtp">
          <link path="test/smtp" />
        </node>

        <node name="logging">
          <link path="test/logging" />
          <property name="fileName" value="adminconsole" />
          <property name="dirName" value="${user.dir}/logs" />
        </node>

        <node name="general">
          <link ref="testapp1-common" />
          <property name="publicUrl" value="${url}" />
        </node>

        <node name="accounts">
          <node name="foo1">
            <property name="username" value="foo1" />
            <property name="password" value="secret" />
            <property name="role" value="admin" />
          </node>
          <node name="foo2">
            <property name="username" value="foo2" />
            <property name="password" value="secret" />
            <property name="role" value="admin" />
          </node>
          <node name="foo3">
            <property name="username" value="foo3" />
            <property name="password" value="secret" />
            <property name="role" value="admin" />
          </node>
          <node name="foo4">
            <property name="username" value="foo4" />
            <property name="password" value="secret" />
            <property name="role" value="admin" />
          </node>
          <node name="foo5">
            <property name="username" value="foo5" />
            <property name="password" value="secret" />
            <property name="role" value="admin" />
          </node>
          <node name="foo6">
            <property name="username" value="foo6" />
            <property name="password" value="secret" />
            <property name="role" value="admin" />
          </node>
          <node name="foo7">
            <property name="username" value="foo7" />
            <property name="password" value="secret" />
            <property name="role" value="admin" />
          </node>
        </node>
      </node>
      
      <node name="backend1">
        <node name="properties">
          <link path="test/env" />
          <link path="test/freemarker" />
          <link path="test/smtp" />
          <link ref="testapp1-database" />
          <property name="pool.min-size" value="${poolMinSize}" />
          <property name="pool.max-size" value="${poolMaxSize}" />
          <property name="pool.timeout" value="${poolTimeOut}" />
          <property name="max-statements" value="${maxStatements}" />
          <property name="batch-size" value="${batchSize}" />
        </node>
      </node>
      <node name="backend2">
        <node name="properties">
          <link path="test/env" />
          <link path="test/freemarker" />
          <link path="test/smtp" />
          <link ref="testapp1-database" />
          <property name="pool.min-size" value="${poolMinSize}" />
          <property name="pool.max-size" value="${poolMaxSize}" />
          <property name="pool.timeout" value="${poolTimeOut}" />
          <property name="max-statements" value="${maxStatements}" />
          <property name="batch-size" value="${batchSize}" />
        </node>
      </node>      
      <node name="backend3">
        <node name="properties">
          <link path="test/env" />
          <link path="test/freemarker" />
          <link path="test/smtp" />
          <link ref="testapp1-database" />
          <property name="pool.min-size" value="${poolMinSize}" />
          <property name="pool.max-size" value="${poolMaxSize}" />
          <property name="pool.timeout" value="${poolTimeOut}" />
          <property name="max-statements" value="${maxStatements}" />
          <property name="batch-size" value="${batchSize}" />
        </node>
      </node>      
    </node>
</node>
</registry>
