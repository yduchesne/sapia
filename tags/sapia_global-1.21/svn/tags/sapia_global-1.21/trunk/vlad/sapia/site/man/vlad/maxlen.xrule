<descriptor namespace="vlad" 
            name="maxLen"
            class="org.sapia.validator.rules.MaxLen"
            nested="no"
            >

  <description>
    Use this rule to ensure that a given string is of a given
    maximum length (greater or equal than a given length). 
  </description>
  <attributes>
    <attribute name="attribute" mandatory="no">
      <description>Specifies the name of the accessor whose return value's string representation
      will be validated. The rule ensures that the string's length is at most of the size 
      specified by the "len" attribute - see next.
      <p>
      If this attribute is omitted, the current object on the validation context's
      stack will be validated.
      </p>
      <p>If the object to validate is a null reference, an error is generated.</p>
      <p>This attribute's value must use the property access notation specified by the
      <a href="http://jakarta.apache.org/commons/beanutils.html">BeanUtils</a> libary - see 
      the library's <a href="http://jakarta.apache.org/commons/beanutils/api/org/apache/commons/beanutils/package-summary.html">
      javadoc</a> for more information.</p>
      </description>
    </attribute>
    <attribute name="len" mandatory="yes">
      <description>An integer value corresponding to the maximum length expected from the
      validated strings.</description>
    </attribute>    
  </attributes>
  
  <examples>
    <example name="Enforcing the maximum length of employee codes">
      <content><![CDATA[
<vlad xmlns:vlad="http://www.sapia-oss.org/vlad/rules">

  <ruleSet id="checkEmployee">
    
    <vlad:maxLen attribute="employeeCode" len="10">
       <message 
        value="Employee code must have at most 10 chars."/>
    </vlad:maxLen>
    
  </ruleSet>
</vlad>]]>      
      </content>
    </example>
  </examples>

</descriptor>