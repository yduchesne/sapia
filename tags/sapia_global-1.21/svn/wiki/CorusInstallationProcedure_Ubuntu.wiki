#summary Corus Installation Procedure for Ubuntu

= Introduction =

This page will guide you through the necessary steps to install Corus on Ubuntu 10.04 (64 bits).


= 1. Preparing the environment =

== i) Java ==
 * Before installing Corus you need to have Java installed on your machine. Corus requires at least Java 6.
 * Corus requires the presence of the `$JAVA_HOME` environment variable that points to the Java runtime you want to use (JRE or JDK).

== ii) Corus user ==
 * Since Corus is mainly a background process, we strongly suggest that the Corus server be installed and executed with the privileges of a restricted user.
 * Using the command `useradd`, created a new system user named "corus". Here's a quick example of it:

 ||`root@ubuntu:~# useradd --home /home/corus --create-home --system --shell /bin/bash corus `<br />` root@ubuntu:~# `||

== iii) Installation directory ==
 * You need to create a directory on your system in which you will install Corus.
 * For the purpose of this demonstration, we create the `/opt/sapia-corus` directory.
 ||` root@ubuntu:~#  mkdir /opt/sapia-corus`<br />` root@ubuntu:~# `||


= 2. Extract the Corus Distribution =
 * Extract the Corus distribution file into the Corus installation directory created above.
 ||` root@ubuntu:/opt/sapia-corus# tar -xvf ../datastore/sapia_corus_server-2.0-linux64.tar.gz `<br />` root@ubuntu:/opt/sapia-corus# `||

 * Rename the created root directory of the archive if you need.
 * For example, we extracted the tar and the files reside under the directory `/opt/sapia-corus/sapia_corus-2.0`
 * Make sure that the files of the distribution are own by the corus user. Here's an example using the `chown` command:
 ||` root@ubuntu:/opt/sapia-corus# chown -R corus:corus sapia_corus-2.0/ `<br />` root@ubuntu:/opt/sapia-corus# `||


= 3. Configure the Environment =
 * To run properly, Corus requires the presence of another environment variable: CORUS_HOME
 * The variable must point to the home directory of the Corus installation, which in our case is the `/opt/sapia-corus/sapia_corus-2.0` directory
 * However, we suggest the usage of a `current` symbolic link under `/opt/sapia-corus` to facilitate the future upgrades of Corus. That way if you ever extract another distribution of Corus you will simply have to change the symbolic link and upon restart the new distribution will be taken into account.
 * Here is an example of how to create a symbolic link using the `ln` command (make sure you are in the install direcotry):

 || `root@ubuntu:/opt/sapia-corus# pwd`<br />`/opt/sapia-corus`<br /><br /> `root@ubuntu:/opt/sapia-corus# ln -s sapia_corus-2.0/ current`<br /><br />`root@ubuntu:/opt/sapia-corus# ls -latr`<br />`total 12`<br />`drwxr-xr-x. 5 root   root      4096 Nov 24 22:29 ..`<br />`drwxr-xr-x. 6 corus corus 4096 Nov 26 06:15 sapia_corus-2.0`<br />`lrwxrwxrwx. 1 root   root        16 Nov 26 06:54 current -> sapia_corus-2.0/`<br />`drwxr-xr-x. 3 root   root      4096 Nov 26 06:54 .`<br />`root@ubuntu:/opt/sapia-corus# ` ||

 * To define an environment variable on Ubuntu, we suggest to modify the file `/etc/environment` which contains the global environment variables for the system.
 * Using `vi` (or the file editor of your choice) add the following line to the file:
 ||` export CORUS_HOME=/opt/sapia-corus/current `<br />||

 * You can also modify the `$PATH` environment variable to have an easy access to the various commands of the Corus distribution
 * To do so, edit the `/etc/environment` file again and add the following line to it:
 || ` export PATH=$PATH:$CORUS_HOME/bin`<br /> ||

At this point you should be able to start Corus by manually invoking the `$CORUS_HOME/bin/corus` file. However performing this task manually is cumbersome. The next section will guide you through the steps to register Corus as a service with the Linux run levels.


= 4. Linux System Service Integration with Upstart = 
With the installation of Corus as a Linux system service (in the run levels), you will be able to automatically start Corus at the startup of your machine. Ubuntu integrates the Upstart daemon tool that provides an easy way to start services and tasks. Once properly configured, upstart takes care of starting Corus when your system starts. You can also stop, start and restart the Corus service using the `initctl` command.

To register Corus as a system service, you need to:
== i) Define a Corus configuration file ==
 * you need to define a Corus configuration file that will be used when the Corus service starts.
 * We provide a default configuration file to help you: it is located under `$CORUS_HOME/config/corus_service_33000.wrapper.properties`. You can have a look at the configuration section to know how to customize Corus.

== ii) Prepare the upstart configuration file ==
 * A file is available to configure Corus with upstart: it located under `$CORUS_HOME/bin/corus.upstart.conf`
 * Copy it under the directory `/etc/init/` and name it `corus.conf` (make sure you are using the root user)
 ||` root@ubuntu:/opt/sapia-corus# cp $CORUS_HOME/bin/corus.upstart.conf /etc/init/corus.conf `<br />` root@ubuntu:/opt/sapia-corus# `||

 * Once copied, you need to edit the file and set the proper value for the CORUS_HOME environment variable.
 * By default, the file is configured to start Corus using the `$CORUS_HOME/config/corus_service_33000.wrapper.properties` configuration file (so you can have a try right now).

== iii) Register with upstart ==
 * Well, at this point it is already done: upstart monitors the files of the `/etc/init/` directory and automatically registers any valid configuration file... it is that easy!!!

 * However upstart do not start Corus once registered (only on the next reboot). To manually start Corus you can use the `initctl` command like that:

 || `root@ubuntu:~# initctl start corus ` <br /> `corus start/running` <br /> `root@ubuntu:~# ` ||

Once you start the Corus service, you can validate the proper execution of the Corus service by: 

1. looking at the Corus log files that resides under the `$CORUS_HOME/logs` directory

2. starting the Corus CLI (Command Line Interface) to connect to the server. The script is called `coruscli` and resides under the `$CORUS_HOME/bin` directory. If you previously added the `$CORUS_HOME/bin` directory in the `$PATH` environment variable, you can simply invoke the script. Otherwise you will have to get to the bin directory and invoke the command.

<table boder="0" width="50%">
<tr><td>
<a href="http://sapia.googlecode.com/svn/wiki/resources/ScreenShot_LinuxUbuntu_CorusCLI.jpg"><img width="100%" src="http://sapia.googlecode.com/svn/wiki/resources/ScreenShot_LinuxUbuntu_CorusCLI.jpg" /></a>
</td></tr>
<tr align="center"><td>_Click on the image for full size resolution_</td></tr>
</table>

And that is pretty much it for the installation. You can now envoy Corus. 

== iv) Manage the Corus System Service ==
 * You can use the `initctl` command (which interacts with upstart) to manually manage the corus service

 || `root@ubuntu:~# initctl start corus ` <br /> `corus start/running` <br /> `root@ubuntu:~# ` <br /><br /> `root@ubuntu:~# initctl restart corus` <br /> `corus start/running` <br /> `root@ubuntu:~# ` <br /><br /> `root@ubuntu:~# initctl stop corus` <br /> `corus stop/waiting` <br /> `root@ubuntu:~#  ` ||

 * If you ever need to remove the Corus system service, you simply have to remove the `corus.conf` configuration file from `/etc/init/` directory and upstart will take care of the rest (make sure you stop corus first)
 
 || `root@ubuntu:~# initctl stop corus ` <br /> `corus stop/waiting` <br /><br /> `root@ubuntu:~# rm /etc/init/corus.conf` <br /><br /> `root@ubuntu:~# initctl status corus` <br /> `initctl: Unknown job: corus` ||