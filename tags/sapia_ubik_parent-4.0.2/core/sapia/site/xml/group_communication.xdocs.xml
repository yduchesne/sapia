<sapia:page title="Group Communication" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">
  <sapia:vmenu>
    <sapia:vsection name="Project Home" href="home.html"/>
    <sapia:vsection name="Wiki" href="http://code.google.com/p/sapia/wiki/Ubik"/>
    <sapia:vsection name="RMI" href="rmi.html">
      <sapia:vitem name="For Dummies" href="rmi.html#dummies" />
      <sapia:vitem name="Believing" href="rmi.html#believing" />
      <sapia:vitem name="Architecture" href="architecture.html" />
      <sapia:vitem name="Advanced" href="advanced.html" />
      <sapia:vitem name="Cookbook" href="cookbook.html" />
    </sapia:vsection>
    
    <sapia:vsection name="Naming" href="naming.html">
      <sapia:vitem name="Robust Naming" href="naming.html#robust" />
      <sapia:vitem name="Usage" href="naming.html#usage" />
      <sapia:vitem name="Advanced" href="naming.html#advanced" />    
    </sapia:vsection>
    
    <sapia:vsection name="Transports">
      <sapia:vitem name="HTTP" href="transport/http.html" />
      <sapia:vitem name="Mplex" href="transport/mplex.html" />
	  <sapia:vitem name="Standard/TCP" href="transport/standard_tcp.html" />
      <sapia:vitem name="NIO/TCP" href="transport/nio_tcp.html" />
    </sapia:vsection>  
    
    <sapia:vsection name="Group Comm" href="group_communication.html">
      <sapia:vitem name="Event Channel" href="group_communication.html#eventchannel" />
      <sapia:vitem name="Protocol" href="group_communication.html#control_protocol" />    
      <sapia:vitem name="Avis" href="group_communication.html#using_avis" />
      <sapia:vitem name="UDP Unicast" href="group_communication.html#udp_unicast" />
    </sapia:vsection>      
    
    <sapia:vsection name="Customization" href="customization.html">
      <sapia:vitem name="Logging" href="customization.html#logging" />    
      <sapia:vitem name="Stats" href="customization.html#stats" />
      <!--sapia:vitem name="JMX" href="customization.html#jmx" /-->
      <sapia:vitem name="Stubs" href="customization.html#stubs" />
      <sapia:vitem name="Callbacks" href="customization.html#callbacks" />    
    </sapia:vsection>               
    
    <sapia:vsection name="FAQ" href="faq.html">
      <sapia:vitem name="Licensing" href="faq.html#licensing" />  
      <sapia:vitem name="Scalability" href="faq.html#perf" />  
      <sapia:vitem name="Networking" href="faq.html#networking" />
    </sapia:vsection>    
    
    <sapia:vsection name="Javadoc" href="maven/api/index.html"/>
    <sapia:vsection name="Download" href="download.html"/>
    <sapia:vsection name="Mailing List" href="list.html"/>
  </sapia:vmenu>

  <sapia:sect1 title="Group Communication" alias="group_communication">
    <sapia:section>
      <sapia:path name="home" href="../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="ubik" href="home.html" />
      <sapia:path name="rmi" href="rmi.html" />
      <sapia:path name="group communication" />      
    </sapia:section>  
  
    <toc/>
    <sapia:sect-desc>
    <p>
    For features such as dynamic discovery (used to avoid configuring network addresses for point-to-point connections), Ubik uses a highly configurable
    group communication framework. Ubik's distributed JNDI implementation makes use of that framework.
    </p>
    </sapia:sect-desc>
    
    <sapia:sect2 title="The EventChannel" alias="eventchannel">    
      <p>
        Ubik's group communication logic is built upon the <sapia:classlink>org.sapia.ubik.mcast.EventChannel</sapia:classlink> class, which implements group communication
        on top of two abstractions:
        <ul>
          <li>
          	<sapia:classlink>org.sapia.ubik.mcast.BroadcastDispatcher</sapia:classlink>: handles the broadcast of 
          	<sapia:classlink>org.sapia.ubik.mcast.RemoteEvent</sapia:classlink>s 
          	to all other <sapia:class>EventChannel</sapia:class> nodes in a domain.
          </li>
          <li>
          	<sapia:classlink>org.sapia.ubik.mcast.UnicastDispatcher</sapia:classlink>: handles the dispatching 
          	of <sapia:class>RemoteEvent</sapia:class>s in a point-to-point manner - from one <sapia:class>EventChannel</sapia:class> to another.
          </li>
        </ul>
      </p>
      
      <p>
      	Internally, an <sapia:class>EventChannel</sapia:class> uses its <sapia:class>BroadcastDispatcher</sapia:class> at startup to broadcast its
      	presence to other <sapia:class>EventChannel</sapia:class> nodes. In turn, these other nodes will publish themselves to their new peer,
      	this time using the <sapia:class>UnicastDispatcher</sapia:class>. 
      </p>      
      <p>
        The <sapia:class>BroadcastDispatcher</sapia:class> is also used at shutdown: an <sapia:class>EventChannel</sapia:class> will then notify
        the other nodes in the domain that it is shutting, and thus disappearing from the network - this allows other nodes to immediately synchronize
        their view of the domain.
      </p>
      <p>
      	By default, the implementations of the dispatcher abstractions that are used by an <sapia:class>EventChannel</sapia:class> are 
        <sapia:classlink>org.sapia.ubik.mcast.udp.UDPBroadcastDispatcher</sapia:classlink> and 
        <sapia:classlink>org.sapia.ubik.mcast.tcp.mina.MinaTcpUnicastDispatcher</sapia:classlink> respectively. The former
        uses IP multicast to broadcast <sapia:class>RemoteEvent</sapia:class>s. It is by default configured to listen to multicast address and port
        <sapia:command>231.173.5.7</sapia:command> and <sapia:command>5454</sapia:command>, respectively. This can be configured through the following JVM properties:
        
        <ul>
          <li><sapia:command>ubik.rmi.naming.mcast.address</sapia:command>: used to specify the multicast address.</li>        
          <li><sapia:command>ubik.rmi.naming.mcast.port</sapia:command>: used to specifiy the multicast port.</li>
        </ul>
      </p>
      <p>The default dispatcher implementations can be configured otherwise - see further below for the details.</p>
     
    </sapia:sect2>
    
    <sapia:sect2 title="The Control Protocol at a Glance" alias="control_protocol">
	  <p>Among all the event channel nodes that discover each other (and are thus part of the same domain),
      one is elected master - as the others are assigned the slave status. It is the master that periodically probes 
      the slaves for their status - through "heartbeat requests" (which by default are sent every minute by the master).</p>
      
      <p>The control protocol was designed to be scalable across a large number of nodes, and to minimize chattiness. The
      protocol does not rely on broadcast - since when using IP multicast, multiple domains can use the same 
      multicast address, resulting in control messages crossing domains.</p>
      
      <p>Rather then, the protocol is implemented over unicast, but using a cascading scheme where slave nodes are put
      to contribution: a first set of nodes is determined, where each relays the control messages to other 
      nodes, and so on, until no nodes are left to contact. The number of nodes into which to split, at every stage, 
      is determined by the <sapia:command>ubik.rmi.naming.mcast.control.split.size</sapia:command> JVM property - which defaults to 5.</p>
      
      <p>
      For example, let's say there are 101 nodes, one of them being the master - it is always the master that initiates a control sequence
      as part of the protocol. Given a split size of 5, it means that the 100 nodes are divided in 5 sets of 20 nodes. The master node sends a copy of the
      control message to the first node in each group - each copy of the message holding the IDs of the 20 nodes of its corresponding set. At the next stage,
      the node receiving the control message removes its own ID from the set, and splits again. There are thus 20-1 nodes (19) to divide by 5, yielding 4 sets of 
      4 nodes to contact, and 1 group of 3. Since 4 and 3 cannot be further divided by 5, this will be the last time such a split occurs, meaning that each
      of these nodes will dispatch the control messages to 4 or 3 other nodes - accordingly. If you do the calculations you'll see that it takes 4 stages in the 
      cascade to dispatch a message across a cluster of 1000 event channel nodes, given a split size of 5. Of course the larger that split size, the less 
      dispatch stages you will incur. Let's just try with a split size of 10, with the 101 nodes of our cluster: the first split will yield 10 sets of 10 nodes.
      When the control message reaches the first node of each set, there are 9 nodes remaining to contact at each level. Therefore, given our split size, no
      further splits are done, and each of the nodes at that stage will relay the control message to the 9 remaining nodes it has in its set.
      </p>
      
      <p>By default, since the size of control messages may be larger (given their payload in terms of having to carry node IDs around), the <sapia:classlink>org.sapia.ubik.mcast.tcp.mina.MinaTcpUnicastDispatcher</sapia:classlink>
      is used: it implements point-to-point communication over TCP, using a NIO-based transport. You can change this to using UDP, although we really do not recommend it. See the 
      <a href="group_communication.html#udp_unicast">UDP Unicast</a> section for details.</p>

    </sapia:sect2>
    
    <sapia:sect2 title="Broadcast using Avis" alias="using_avis">
      <p>In environments where IP multicast is not supported, an alternate broadcast
      mechanism can be used: it relies on the <a href="http://avis.sourceforge.net/">Avis</a> group communication framework. 
      In this setup, an Avis "router" provides the broadcast fabric. It acts as a message queue (sort of), and all event 
      channels become clients of it.</p>
      
      <p>You can federate multiple such routers for more reliability - without overblowing it, otherwise you will create 
      yourself a configuration nightmare. Two instances should be sufficient for most cases, since broadcast is sparingly used.</p>
      
      <p>To use Avis broadcast implementation, you have to configure the following JVM properties:</p>
      
      <ul>
        <li><sapia:command>ubik.rmi.naming.broadcast.provider</sapia:command> should have its value set to <sapia:command>ubik.rmi.naming.broadcast.avis</sapia:command>: 
        this indicates that the <sapia:classlink>org.sapia.ubik.mcast.avis.AvisBroadcastDispatcher</sapia:classlink> 
        should be used for broadcasting.</li>
      	<li><sapia:command>ubik.rmi.naming.broadcast.avis.url</sapia:command> should be set to the URL to use to connect to the Avis router - 
      	For example: <sapia:command>elvin://localhost:2917</sapia:command>. 
      	</li>
      </ul>
      <p>The programmatic version would be:</p>
      <sapia:code>import org.sapia.ubik.mcast.EventChannel;
import org.sapia.ubik.rmi.Consts;
import org.sapia.ubik.util.Props;

Properties properties = new Properties();
properties.setProperty(Consts.BROADCAST_PROVIDER, Consts.BROADCAST_PROVIDER_AVIS);
properties.setProperty(Consts.BROADCAST_AVIS_URL, "elvin://localhost:2917");
EventChannel channel = new EventChannel("myDomain", new Props().addProperties(properties));</sapia:code>
      
      <p>The format of the URL is entirely Avis' - see its documentation for more info and for instructions detailing how to install the router.</p>
      
      <sapia:note>
      The Avis client library is required in the classpath of your application if you use that mechanism (Ubik is built and tested against version 1.1.1, the latest). 
      The library is not distributed under the same license as Ubik: it is published under the LGPL. If you distribute an application that uses a version of that
      library that you've modified, your application will become subjected to the terms of the LGPL. Since you will most likely use Avis as is, you should 
      not fear being impacted. 
      </sapia:note>

    </sapia:sect2>
    <sapia:sect2 title="UDP unicast" alias="ucp_unicast">
      <p>You can use UDP for unicast group communication, but we do not recommend it. You have to be aware that a default packet size of 3.072 kb is set by
      default (configurable through the <sapia:command>ubik.rmi.naming.mcast.bufsize</sapia:command> JVM property). That default size may prove unsufficient, depending
      on the size of messages that are exchanged, and you may risk having some messages not going through.
      </p>
    
   	  <p>To activate the <sapia:classlink>org.sapia.ubik.mcast.udp.UDPUnicastDispatcher</sapia:classlink>, you have to set the 
   	  <sapia:command>ubik.rmi.naming.unicast.provider</sapia:command> to <sapia:command>ubik.rmi.naming.unicast.udp</sapia:command>
   	  </p>
   		
   		<p>Programmatically, you would do it as follows:</p>
   		
   		<sapia:code>import org.sapia.ubik.mcast.EventChannel;
import org.sapia.ubik.rmi.Consts;
import org.sapia.ubik.util.Props;

Properties properties = new Properties();
properties.setProperty(Consts.UNICAST_PROVIDER, Consts.UNICAST_PROVIDER_UDP);
EventChannel channel = new EventChannel("myDomain", new Props().addProperties(properties));</sapia:code>
    </sapia:sect2>    
  </sapia:sect1>

</sapia:page>
