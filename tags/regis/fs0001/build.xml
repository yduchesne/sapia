
<project name="regis" default="build" basedir="." xmlns:savant="inversoft:savant">

  <property name="project.javaDir" value="${basedir}/java"/>
  <property name="project.savantDir" value="${basedir}/savant"/>
  <property name="project.siteDir" value="${basedir}/site"/>
  <property name="project.sourceDir" value="${project.javaDir}/src"/>
  <property name="project.testDir" value="${project.javaDir}/test"/>
  <property name="project.classesDir" value="${project.javaDir}/classes"/>
  <property name="project.docDir" value="${basedir}/doc"/>
  <property name="project.javadocDir" value="${project.siteDir}/html/api"/>
  <property name="project.umldocDir" value="${project.docDir}/uml"/>
  <property name="project.libraryDir" value="${basedir}/lib"/>
  <property name="project.binDir" value="${basedir}/bin"/>
  <property name="project.distributionDir" value="${basedir}/dist"/>
  <property name="project.distributionName" value="sapia_regis"/>
  <property name="project.testResultDir" value="${basedir}/testResult"/>
  <property name="project.packagePath" value="org/sapia/regis"/>
  <property name="project.packageName" value="org.sapia.regis"/>
  <property name="project.testPattern" value="**/*Test.class"/>

  <typedef resource="com/inversoft/savant/ant/antlib.xml" uri="inversoft:savant">
    <classpath>
      <fileset dir="${project.savantDir}">
        <include name="verge*.jar"/>
      </fileset>
    </classpath>
  </typedef>    

 <!-- Savant stuff -->
  <path id="build-lib-classpath">
    <fileset dir="${project.savantDir}" includes="*.jar"/>
  </path>  

  <!-- Defines the classpath for the main tasks -->
  <path id="lib-classpath">
    <fileset dir="${project.libraryDir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <!-- Defines the classpath for the test tasks -->
  <path id="test-classpath">
    <path refid="lib-classpath" />
    <path refid="build-lib-classpath" />
    <pathelement location="${project.classesDir}" />
  </path>


  <!-- Initializes this build by creating the needed directories -->
  <target name="init">
    <echo message="Initializing..." />
    <mkdir dir="${project.javaDir}" />
    <mkdir dir="${project.sourceDir}" />
    <mkdir dir="${project.testDir}" />
    <mkdir dir="${project.classesDir}" />
    <mkdir dir="${project.docDir}" />
    <mkdir dir="${project.javadocDir}" />
    <mkdir dir="${project.umldocDir}" />
    <mkdir dir="${project.libraryDir}" />
    <mkdir dir="${project.binDir}" />
    <mkdir dir="${project.testResultDir}" />
    <mkdir dir="${project.distributionDir}" />
  </target>


  <!-- Removes all the classes from the ${project.classesDir} directory -->
  <target name="clean-classes">
    <echo message="Cleaning classes..." />
    <delete includeEmptyDirs="true">
      <fileset dir="${project.classesDir}" includes="**/*" />
    </delete>
  </target>
  
  <!-- Downloads dependencies -->
  <target name="get-libs">
    <ant antfile="${project.savantDir}/dependencies.xml" inheritAll="yes" inheritRefs="yes" target="do-get-libs" />
  </target>      

  <!-- Compiles all the files of the ${project.sourceDir} and ${project.testDir} directories -->
  <target name="compile" depends="clean-classes,init">
    <javac destdir="${project.classesDir}" debug="true" classpathref="lib-classpath" excludes="**/CVS/**/*.java">
      <src path="${project.sourceDir}" />
      <src path="${project.testDir}" />
    </javac>

    <javac destdir="${project.classesDir}" debug="true" classpathref="lib-classpath" excludes="**/CVS/**/*.java">
      <src path="${project.sourceDir}" />
      <src path="${project.testDir}" />
    </javac>

    <!--copy todir="${project.classesDir}/${project.packagePath}">
        <fileset dir="${project.sourceDir}/${project.packagePath}" excludes="**/*.java" />
    </copy-->
    <copy todir="${project.classesDir}">
      <fileset dir="${project.sourceDir}" excludes="**/*.java" />
      <fileset dir="${project.testDir}" excludes="**/*.java" />
    </copy>
  </target>


  <!-- Executes the jUnit test cases of the ${project.testDir} directory -->
  <target name="test">
    <echo message="${java.class.path}"/>
    <junit fork="yes">
      <classpath>
        <path refid="test-classpath" />
      </classpath>
      <formatter type="plain" usefile="false"/>
      <formatter type="xml"/>
      <batchtest haltonfailure="yes" todir="${project.testResultDir}">
        <fileset dir="${project.classesDir}" includes="${project.packagePath}/${project.testPattern}"/>
      </batchtest>
    </junit>
  </target>


  <!-- Builds the distribution of this project -->
  <target name="dist">
    <jar jarfile="${project.distributionDir}/${project.distributionName}.jar">
      <fileset dir="${project.classesDir}">
        <exclude name="**/CVS/*.*"/>
        <exclude name="**/.svn/*.*"/>
        <exclude name="**/*Test*.*"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="*.txt"/>
      </fileset>
      <manifest>
        <attribute name="Built-By" value="Sapia OSS (http://www.sapia-oss.org)"/>
      </manifest>
    </jar>

    <jar jarfile="${project.distributionDir}/${project.distributionName}_src.jar">
      <fileset dir="${project.classesDir}" />
      <fileset dir="${project.javaDir}">
        <include name="src/**"/>
        <exclude name="**/CVS/*.*"/>
        <exclude name="**/.svn/*.*"/>
      </fileset>
      <fileset dir="${project.javaDir}">
        <include name="test/**"/>
        <exclude name="**/CVS/*.*"/>
        <exclude name="**/.svn/*.*"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="*.txt"/>
      </fileset>
      <manifest>
        <attribute name="Built-By" value="Sapia OSS (http://www.sapia-oss.org)"/>
      </manifest>
    </jar>

    <savant:publish from="${project.distributionDir}/${project.distributionName}.jar">
      <savant:artifact id="${project.distributionName}" group="sapia" projectname="regis" name="${project.distributionName}" version="0.0" type="jar" />
    </savant:publish>
  </target>

  <!-- Builds the web site of this project to the ${project.siteDir} directory -->
  <target name="site" depends="doc">
    <mkdir dir="${project.siteDir}/html/man"/>
    <delete dir="${project.siteDir}/html" excludes="api/**/*.*"/>
    <xslt basedir="${project.siteDir}/xml"
        destdir="${project.siteDir}/html"
        includes="**/*.xdocs"
        style="${project.siteDir}/xsl/sapia.xsl"/>

    <copy todir="${project.siteDir}/html">
      <fileset dir="${project.siteDir}/xml">
        <exclude name="**/*.xdocs"/>
      </fileset>
    </copy>
    <copy todir="${project.siteDir}/html">
      <fileset dir="${project.docDir}">
        <include name="**/*.pdf"/>
      </fileset>
    </copy>
  </target>

  <!-- Builds the javadoc of this project to the ${project.javadocDir} directory -->
  <target name="doc">
    <delete includeEmptyDirs="true">
      <fileset dir="${project.javadocDir}" includes="**/*" />
    </delete>

    <copy todir="${project.javadocDir}/${project.packagePath}">
      <fileset dir="${project.sourceDir}/${project.packagePath}" excludes="**/*.java"/>
    </copy>

    <javadoc packagenames="${project.packageName}.*" sourcepath="${project.sourceDir}"
        destdir="${project.javadocDir}" author="true" version="true" use="true"
        splitindex="true" classpathref="test-classpath" windowtitle="Sapia Open Community - API Documentation">
      <doctitle><![CDATA[<h2>Regis Configuration Framework, v. 1.0<br/>API Specification</h2>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2006 Sapia Open Community, Inc. All Rights Reserved.</i>]]></bottom>
      <group title="Core Packages" packages="${project.packageName}.*"/>
      <link href="http://java.sun.com/j2se/1.3/docs/api/" />
    </javadoc>
  </target>
  
  <!-- Build a release; done by project admins -->
  <target name="release" depends="clean-classes, compile, site">
    <taskdef classname="org.sapia.antlib.build.MakeVersionClass" name="makeVersionClass"/>
    <taskdef classname="org.sapia.antlib.build.MakeVersionFile" name="makeVersionFile"/>
    <mkdir dir="${project.classesDir}/META-INF"/>
    <mkdir dir="${project.sourceDir}"/>
    <input message="Enter release version number (e.g.: 1.0.1):" addproperty="sapia.build.release.no"/>
    <makeVersionClass destDir="${project.sourceDir}"/>
    <makeVersionFile destDir="${project.classesDir}/META-INF"
        softwareName="Regis (configuration registry)"
        version="${sapia.build.release.no}"/>
    <javac srcdir="${project.sourceDir}"
        destdir="${project.classesDir}" includes="version.java"/>
    <antcall target="dist"/>
    <zip destfile="${project.distributionName}-${sapia.build.release.no}.zip">
      <fileset dir="${project.javaDir}">
        <exclude name="**/CVS/**/*.*"/>
        <exclude name="**/.svn/*.*"/>
        <exclude name="classes/**/*.*"/>
        <exclude name="src/**/*.*"/>
        <exclude name="test/**/*.*"/>
        <exclude name="**/*.version"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="*.txt"/>
        <include name="*.license"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="dist/${project.distributionName}.jar"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="lib/*.jar"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="build.xml"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="site/**/html/**/*.*"/>
      </fileset>
    </zip>
    <zip destfile="${project.distributionName}-${sapia.build.release.no}_src.zip">
      <fileset dir="${basedir}">
        <exclude name="java/**/CVS/**/*.*"/>
        <exclude name="**/.svn/*.*"/>
        <exclude name="java/classes/**/*.*"/>
        <exclude name="java/**/*.version"/>
        <include name="java/src/**/*.*"/>
        <include name="java/test/**/*.*"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="*.txt"/>
        <include name="*.license"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="dist/${project.distributionName}.jar"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="lib/*.jar"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="build.xml"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="site/**/html/**/*.*"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="savant/*.xml"/>
        <include name="savant/verge*.jar"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="etc/**/*.xml"/>
        <include name="etc/**/*.properties"/>
      </fileset>
    </zip>
    <savant:publish from="${project.distributionDir}/${project.distributionName}.jar">
      <savant:artifact id="${project.distributionName}" group="sapia" projectname="regis" name="${project.distributionName}" version="${sapia.build.release.no}" type="jar" />
    </savant:publish>
  </target>

  <target name="admin">
    <java classname="org.sapia.regis.gui.Main">
      <classpath>
        <path refid="lib-classpath" />
        <fileset dir="${project.distributionDir}">
          <include name="sapia_regis.jar"/>
        </fileset>      	
      </classpath>
    </java>
  </target>

  <!-- Default target -->
  <target name="build" depends="init, get-libs, clean-classes, compile, test, dist" />

  <target name="createConfig">
    <taskdef classname="org.sapia.regis.remote.ant.RegistryTask"
        name="updateRegistry">
      <classpath>
        <fileset dir="${project.distributionDir}">
          <include name="sapia_regis.jar"/>
        </fileset>
        <fileset dir="${project.libraryDir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
    <updateRegistry
        jndiName="regis"
        username="regis"
        password="secret"
        url="ubik://192.168.0.103:1099"
        config="etc/configCreateExample.xml"></updateRegistry>
  </target>

  <target name="updateConfig">
    <taskdef classname="org.sapia.regis.ant.RegistryTask"
        name="updateRegistry">
      <classpath>
        <fileset dir="${project.distributionDir}">
          <include name="sapia_regis.jar"/>
        </fileset>
        <fileset dir="${project.libraryDir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
    <updateRegistry
        jndiName="regis"
        username="regis"
        password="secret"
        url="ubik://192.168.0.103:1099"
        config="etc/configUpdateExample.xml"></updateRegistry>
  </target>

  <target name="checkConfig">
    <taskdef classname="org.sapia.regis.ant.CheckConfigTask"
        name="checkConfig">
      <classpath>
        <fileset dir="${project.distributionDir}">
          <include name="sapia_regis.jar"/>
        </fileset>
        <fileset dir="${project.libraryDir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
    <checkConfig
        properties="etc/checkRegistry.properties">
      <checkNode path="databases" childCount="3">
        <checkNode path="002">
          <checkProperty name="url" value="jdbc://mercury:5432/" />
        </checkNode>
      </checkNode>
      <checkNode path="databases/002">
        <checkProperty name="url" value="jdbc://mercury:5432/" />
      </checkNode>
      <checkProperty path="users/backoffice/account1" name="username" value="cbrown"/>
    </checkConfig>
  </target>

  <target name="copy-repo">
    <copy todir="../regis">
      <fileset dir="${basedir}">
        <exclude name="CVS/*"/>
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>
  </target>

</project>
