<sapia:page title="The Corus Descriptor" cssPath="../css/sapia.css"
  xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">

  <head>
    <link rel="stylesheet" href="../css/corus.css" type="text/css"/>
  </head>

  <sapia:vmenu>
    <sapia:vsection name="Corus Home" href="../index.html"/>
    <sapia:vsection name="Tutorials" href="index.html"/>
  </sapia:vmenu>
  
  <sapia:sect1 title="The Corus Descriptor">
    <sapia:section>
      <sapia:path name="home" href="../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="corus"     href="../home.html" />
      <sapia:path name="learning"  href="../learning.html" />
      <sapia:path name="tutorials" href="index.html"/>
      <sapia:path name="corus descriptor" />
    </sapia:section>
    
    <sapia:sect-desc>
      <p>
        In the <a href="webapp.html">introductory tutorial</a>, you've
        seen that a so-called Corus descriptor must be packaged as part
        of a distribution that is meant for deployment into Corus. That
        descriptor provide the information necessary for a Corus daemon
        to start applications that are part of the distribution. The descriptor
        also contains runtime JVM parameters.
      </p>
      <p>
        The goal of this tutorial is to provided you with more detailed
        information about the Corus descriptor.
      </p>
    </sapia:sect-desc>
    
    <sapia:sect2 title="How the descriptor is processed">
      <p>
        When Corus receives a distribution archive, it first checks if it 
        contains a descriptor - if not, the deployment is denied. If the 
        distribution passes that checked, it unzipped under a specific directory
        - where all distributions are unzipped. 
      </p>
      <p>
        A directory structure is created for each distribution. That is: Corus
        uses the information in the descriptor to create directories 
        corresponding to the distribution name and version. The path of 
        a distribution under the Corus deployment directory is as follows:
        <sapia:command><i>distribution_name</i>/<i>distribution_version</i></sapia:command>.
        It is in the subdirectory corresponding to that path tha a distribution
        is unzipped.
      </p>
      
      <p>
        It is also through the information contained in the descriptor of each
        distribion that Corus can display distribution information to end
        users (using the <sapia:command>ls</sapia:command> command).
      </p>
     </sapia:sect2>

     <sapia:sect2 title="More on the contents">
      <p>
        The really detailed information about the descriptor is in the
        <a href="../CorusGuide.pdf">Corus Manual</a>. We will nevertheless
        delve into the most important information.
      </p>
      
      <p>
        Corus works mainly with two concepts: "distribution" and "process".
        This becomes obvious when looking at the Corus descriptor: TBD
      </p>
      
      <p>
        At the root, the <sapia:command>distribution</sapia:command> element.
        That element two attributes:
        <ul>
          <li>
            Name: the distribution's arbitrarily chosen name.
          </li>
          <li>
            Version: the distribution's arbitrarily chosen version.
          </li>
        </ul>
      </p>
      
      <p>
        Since there may be multiple versions of a distribution (or, to be
        more precise: multiple versions of the applications contained in
        a distribution), a distribution must be assigned a version number that
        distinguishes from other distributions with the same name.
      </p>
      
      <p>
        In turn, under the <sapia:command>distribution</sapia:command> element,
        we find <sapia:process>process</sapia:process> elements. The element
        defines the configuration of a process instance. At the level
        of that element itself, we see attributes that pertain to how
        Corus is to handle the process instances at runtime.
      </p>
      
      <p>
        Each <sapia:command>process</sapia:command> element is thus a blueprint
        for process instances, defining various runtime parameters, as
        well as the application that's is started in the context of the
        process instances is describes.
      </p>
      
      <p>
        As far as the applications themselfves, we can see different 
        <sapia:command>java</sapia:command> elements under the
        <sapia:command>process</sapia:command> element. Each such element holds
        the configuration that is specific to the JVMs that can be started 
        - only one JVM configuration is chosen when starting the JVM process.
      </p>
      
      <p>
        Indeed, we can see that the <sapia:command>java</sapia:command> element
        has a <sapia:command>profile</sapia:command> attribute. The notion of 
        profile has been introduced to support launching applications according
        to the environment in which they are deployed. When starting a process
        using the <sapia:command>exec</sapia:command> command, we must specify
        the profile "under" which we want to start the process. Corus thus
        chooses the JVM configuration whose profile matches the one passed in -
        if any.
      </p>
      
      <p>
        In fact, the <sapia:command>exec</sapia:command> command mandates that 
        we pass in the information that is necessary for Corus to be able to 
        start a process, according to what we've described above:
      </p>
      
      <ul>
        <li><b>distribution name</b>: the name of the distribution to which
              the process belongs
        </li>
        <li><b>distribution version</b>: the version of the distribution to which
              the process belongs
        </li>

        <li><b>process name</b>: the name of the process</li>

        <li><b>profile</b>: the profile under which to start the process.
        </li>

      </ul>
      
      <sapia:note>You can view the full syntax of the 
        <sapia:command>exec</sapia:command> by typing 
        <sapia:command>man exec</sapia:command> in the CLI.
      </sapia:note>
      
     </sapia:sect2>
    
  </sapia:sect1>
</sapia:page>
