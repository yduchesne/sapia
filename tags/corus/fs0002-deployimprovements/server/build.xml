<project name="corus" default="build" basedir="." xmlns:savant="inversoft:savant">
  <property name="project.javaDir"            value="${basedir}/java"/>
  <property name="project.siteDir"            value="${basedir}/site"/>
  <property name="project.savantDir"          value="${basedir}/savant"/>
  <property name="project.vmBootLibDir"       value="${basedir}/vm-boot-lib"/>
  <property name="project.sourceDir"          value="${project.javaDir}/src"/>
  <property name="project.testDir"            value="${project.javaDir}/test"/>
  <property name="project.classesDir"         value="${project.javaDir}/classes"/>
  <property name="project.docDir"             value="${basedir}/doc"/>
  <property name="project.javadocDir"         value="${project.siteDir}/html/api"/>
  <property name="project.umldocDir"          value="${project.docDir}/uml"/>
  <property name="project.extra-libraryDir"   value="${basedir}/extra-lib"/>  
  <property name="project.libraryDir"         value="${basedir}/lib"/>
  <property name="project.magnet-libraryDir"  value="${basedir}/magnetlib"/>
  <property name="project.demo-libraryDir"    value="${basedir}/etc/demoApp/lib"/>
  <property name="project.binDir"             value="${basedir}/bin"/>
  <property name="project.distributionDir"    value="${basedir}/dist"/>
  <property name="project.distributionName"   value="sapia_corus"/>
  <property name="project.testResultDir"      value="${basedir}/testResult"/>
  <property name="project.packagePath"        value="org/sapia/corus"/>
  <property name="project.packageName"        value="org.sapia.corus"/>
  <property name="project.testPattern"        value="**/*Test.class"/>

  <typedef resource="com/inversoft/savant/ant/antlib.xml" uri="inversoft:savant">
    <classpath>
      <fileset dir="${project.savantDir}">
        <include name="verge*.jar"/>
      </fileset>
    </classpath>
  </typedef>  
  
  <!-- Savant stuff -->  
  <path id="build-lib-classpath">
     <fileset dir="${project.savantDir}" includes="*.jar"/>
  </path>  

  <!-- Defines the classpath for the main tasks -->
  <path id="lib-classpath">
      <fileset dir="${project.libraryDir}">
          <include name="**/**/*.jar" />
      </fileset>
      <fileset dir="${project.vmBootLibDir}">
          <include name="**/**/*.jar" />
      </fileset>      
      <fileset dir="${project.extra-libraryDir}">
          <include name="**/**/*.jar" />
      </fileset>      
      <fileset dir="${project.savantDir}">
          <include name="*.jar" />
      </fileset>      
  </path>

  <!-- Defines the classpath for the test tasks -->
  <path id="test-classpath">
      <path refid="lib-classpath" />
      <path refid="build-lib-classpath" />
      <pathelement location="${project.classesDir}" />
  </path> 

  <!-- Initializes this build by creating the needed directories -->
  <target name="init">
      <echo message="Initializing..." />
      <mkdir dir="${project.javaDir}" />
      <mkdir dir="${project.sourceDir}" />
      <mkdir dir="${project.vmBootLibDir}" />
      <mkdir dir="${project.testDir}" />
      <mkdir dir="${project.classesDir}" />
      <mkdir dir="${project.docDir}" />
      <mkdir dir="${project.javadocDir}" />
      <mkdir dir="${project.umldocDir}" />
      <mkdir dir="${project.libraryDir}" />
      <mkdir dir="${project.extra-libraryDir}" />
      <mkdir dir="${project.magnet-libraryDir}" />      
      <mkdir dir="${project.binDir}" />
      <mkdir dir="${project.testResultDir}" />
      <mkdir dir="${project.distributionDir}" />
  </target>

  <!-- Downloads dependencies -->
  <target name="get-libs">
    <ant antfile="${project.savantDir}/dependencies.xml" inheritAll="yes" inheritRefs="yes" target="do-get-libs" />
  </target>    

  <!-- Removes all the classes from the ${project.classesDir} directory -->
  <target name="clean-classes">
      <echo message="Cleaning classes..." />
      <delete includeEmptyDirs="true">
          <fileset dir="${project.classesDir}" includes="**/*" />
      </delete>
  </target>

  <!-- Compiles all the files of the ${project.sourceDir} and ${project.testDir} directories -->
  <target name="compile">
    <javac destdir="${project.classesDir}" debug="true" classpathref="lib-classpath" excludes="**/CVS/**/*.java">
        <src path="${project.sourceDir}" />
        <src path="${project.testDir}" />
    </javac>

    <javac destdir="${project.classesDir}" debug="true" classpathref="lib-classpath" excludes="**/CVS/**/*.java">
        <src path="${project.sourceDir}" />
        <src path="${project.testDir}" />
    </javac>

    <!--copy todir="${project.classesDir}/${project.packagePath}">
        <fileset dir="${project.sourceDir}/${project.packagePath}" excludes="**/*.java" />
    </copy-->
    <copy todir="${project.classesDir}">
        <fileset dir="${project.sourceDir}" excludes="**/*.java" />
        <fileset dir="${project.testDir}" excludes="**/*.java" />        
    </copy>
  </target>


  <!-- Executes the jUnit test cases of the ${project.testDir} directory -->
  <target name="test">
    <echo message="${java.class.path}"/>

    <junit fork="yes">
        <classpath>
            <path refid="test-classpath" />
            <pathelement location="${project.distributionDir}/testResources.jar" />
        </classpath>
        <sysproperty key="user.dir"   value="${basedir}"/>
        <sysproperty key="corus.home" value="${basedir}"/>
        <formatter type="plain" usefile="false"/>
        <formatter type="xml"/>
        <batchtest haltonfailure="yes" todir="${project.testResultDir}">
            <fileset dir="${project.classesDir}" includes="${project.packagePath}/${project.testPattern}"/>
        </batchtest>
    </junit>
  </target>


  <!-- Builds the distribution of this project -->
  <target name="dist">

      <jar jarfile="${project.distributionDir}/${project.distributionName}.jar">
        <fileset dir="${project.classesDir}">
          <exclude name="**/CVS/*.*"/>
          <exclude name="**/*Test*.*"/>
        </fileset>
        <fileset dir="${basedir}">
          <include name="*.txt"/>
        </fileset>
        <manifest>
          <attribute name="Built-By" value="Sapia OSS (http://www.sapia-oss.org)"/>
        </manifest>
     </jar>
     
     <jar jarfile="${project.distributionDir}/${project.distributionName}_src.jar">
        <fileset dir="${project.classesDir}" />
        <fileset dir="${project.javaDir}">
          <include name="src/**"/>
          <exclude name="**/CVS/*.*"/>        
        </fileset>
        <fileset dir="${project.javaDir}">
          <include name="test/**"/>
          <exclude name="**/CVS/*.*"/>        
        </fileset>
        <fileset dir="${basedir}">
          <include name="*.txt"/>
        </fileset> 
        <manifest>
          <attribute name="Built-By" value="Sapia OSS (http://www.sapia-oss.org)"/>
        </manifest>        
      </jar>

      <jar jarfile="${project.distributionDir}/sapia_corus_starter.jar">
        <fileset dir="${project.classesDir}">
          <exclude name="**/CVS/*.*"/>
          <include name="org/sapia/**/starter/Starter*" />
        </fileset>
        <fileset dir="${basedir}">
          <include name="*.txt"/>
        </fileset>
        <manifest>
          <attribute name="Built-By" value="Sapia OSS (http://www.sapia-oss.org)"/>
        </manifest>
     </jar>     
     
     <jar jarfile="${basedir}/etc/demoApp/lib/demo.jar">
       <fileset dir="${project.classesDir}">
         <exclude name="**/examples/**/CVS/*.*"/>
         <include name="**/examples/**/*"/>
       </fileset>
       <manifest>
         <attribute name="Built-By" value="Sapia OSS (http://www.sapia-oss.org)"/>
       </manifest>
     </jar>
     <jar jarfile="${project.distributionDir}/demoDist.jar">
       <fileset dir="${basedir}/etc/demoApp" />
       <manifest>
         <attribute name="Built-By" value="Sapia OSS (http://www.sapia-oss.org)"/>
       </manifest>
     </jar>      
 
     <savant:publish from="${project.distributionDir}/${project.distributionName}.jar">
       <savant:artifact id="${project.distributionName}" group="sapia" projectname="corus" name="${project.distributionName}" version="${sapia.build.release.no}" type="jar"/>
     </savant:publish>         
  </target>

  <!-- Builds the web site of this project to the ${project.siteDir} directory -->
  <target name="site" >
        <delete dir="${project.siteDir}/html" excludes="api/**/*.*"/>  
        <xslt basedir="${project.siteDir}/xml" 
              destdir="${project.siteDir}/html" 
              includes="**/*.xdocs"
              style="${project.siteDir}/xsl/sapia.xsl"/>        
        
        <copy todir="${project.siteDir}/html">
          <fileset dir="${project.siteDir}/xml">
            <exclude name="**/*.xdocs"/>
          </fileset>
        </copy>
        
        <copy todir="${project.siteDir}/html" file="${project.docDir}/text/corus.pdf"/>
        <copy todir="${project.siteDir}/html" file="${project.docDir}/text/corusInterop.pdf"/>
        <copy todir="${project.siteDir}/html" file="${project.docDir}/text/Topology.jpg"/>
  </target>

  <!-- Builds the javadoc of this project to the ${project.javadocDir} directory -->
  <target name="doc">
    <delete includeEmptyDirs="true">
        <fileset dir="${project.javadocDir}" includes="**/*" />
    </delete>

    <copy todir="${project.javadocDir}/${project.packagePath}">
        <fileset dir="${project.sourceDir}/${project.packagePath}" excludes="**/*.java"/>
    </copy>

    <javadoc packagenames="${project.packageName}.*"  sourcepath="${project.sourceDir}"
             destdir="${project.javadocDir}"  author="true"  version="true"  use="true"
             splitindex="true"  classpathref="test-classpath"  windowtitle="Corus API">
            <doctitle><![CDATA[<h2>Corus API Specification</h2>]]></doctitle>
        <bottom><![CDATA[<i>Copyright &#169; 2002-2005 Sapia Open Community, Inc. All Rights Reserved.</i>]]></bottom>
        <group title="Core Packages" packages="${project.packageName}.*"/>
        <link href="http://java.sun.com/j2se/1.3/docs/api/" />
    </javadoc>
  </target>
  
  <!-- Build a release; done by project admins -->  
  <target name="release" depends="build, site, do-release">
  </target>
  <target name="do-release">
    <taskdef classname="org.sapia.antlib.build.MakeVersionClass" name="makeVersionClass"/>
    <taskdef classname="org.sapia.antlib.build.MakeVersionFile"  name="makeVersionFile"/>  
    <mkdir dir="${project.classesDir}/META-INF"/>
    <mkdir dir="${project.sourceDir}"/>    
    <input message="Enter release version number (e.g.: 1.0.1):" addproperty="sapia.build.release.no"/>
    <makeVersionClass destDir="${project.sourceDir}"/>
    <makeVersionFile destDir="${project.classesDir}/META-INF" 
                     softwareName="Corus" 
                     version="${sapia.build.release.no}"/>
    <javac srcdir="${project.sourceDir}"
           destdir="${project.classesDir}" includes="version.java"/>
    <antcall target="dist"/>

    <zip destfile="${project.distributionName}-${sapia.build.release.no}_src.zip">
      <fileset dir="${basedir}">
        <exclude name="java/**/CVS/**/*.*"/>
        <exclude name="java/classes/**/*.*"/>
        <exclude name="java/**/*.version"/>
        <include name="java/src/**/*.*"/>
        <include name="java/test/**/*.*"/>        
      </fileset>
      <fileset dir="${basedir}">
        <include name="*.txt"/>
        <include name="*.license"/>        
      </fileset>      
      <fileset dir="${basedir}">
         <include name="dist/${project.distributionName}.jar"/>
         <include name="dist/${project.distributionName}_starter.jar"/>
      </fileset>
      <fileset dir="${basedir}">
         <include name="lib/**/*.jar"/>
      </fileset>
      <fileset dir="${basedir}">
         <include name="magnetlib/**/*.jar"/>
      </fileset>
      <fileset dir="${basedir}">
         <include name="vm-boot-lib/**/*.jar"/>
      </fileset>      
      <fileset dir="${basedir}">
         <include name="etc/**/*.*"/>
         <exclude name="etc/CVS/**/*.*"/>
      </fileset>
      <fileset dir="${basedir}">
         <include name="build.xml"/>
      </fileset>            
      <fileset dir="${basedir}">
        <include name="site/**/*.*"/>
        <exclude name="site/**/CVS/**/*.*"/>        
      </fileset>      
      <fileset dir="${basedir}">
        <include name="bin/**/*.*"/>
        <exclude name="bin/**/CVS/**/*.*"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="config/**/*.*"/>
        <exclude name="config/**/CVS/**/*.*"/>
      </fileset>
    </zip>
    
    <!-- Generate Win32 release as a zip file -->
    <echo message="Generating Win32 Corus release..." />
    <echo message="---------------------------------" />
    <zip destfile="${project.distributionName}-${sapia.build.release.no}-win32.zip">
      <!-- ./ -->
      <zipfileset dir="${basedir}">
        <include name="*.txt"/>
        <include name="*.license"/>
      </zipfileset>
      <!-- ./bin -->
      <zipfileset dir="${basedir}/bin" prefix="bin">
        <include name="**/*.bat"/>
        <include name="**/*.exe"/>
        <exclude name="**/CVS/**/*.*"/>
      </zipfileset>
      <!-- ./config -->
      <zipfileset dir="${basedir}/config" prefix="config">
        <exclude name="**/CVS/**/*.*"/>
      </zipfileset>
      <!-- ./etc -->
      <zipfileset dir="${basedir}/etc" prefix="etc">
         <exclude name="**/CVS/**/*.*"/>
      </zipfileset>
      <!-- ./dist -->
      <zipfileset dir="${basedir}/dist" prefix="dist">
         <include name="${project.distributionName}.jar"/>
      </zipfileset>
      <!-- ./lib -->
      <zipfileset dir="${basedir}/lib" prefix="lib">
        <include name="**/*.jar"/>
      </zipfileset>
      <zipfileset dir="${basedir}/vm-boot-lib" prefix="vm-boot-lib">
         <include name="**/*.jar"/>
      </zipfileset>            
      <!-- ./magnetlib -->
      <zipfileset dir="${basedir}/magnetlib" prefix="magnetlib">
        <include name="**/*.jar" />
      </zipfileset>
      <!-- ./extra-lib -->
      <zipfileset dir="${basedir}/extra-lib" prefix="extra-lib">
        <include name="*.jar" />
        <include name="*.dll" />
      </zipfileset>
      <!-- ./site -->
      <zipfileset dir="${basedir}/site" prefix="site">
        <include name="**/html/**/*.*"/>
      </zipfileset>      
    </zip>

    <!-- Generate Linux release as a tar file -->
    <echo message="Generating linux Corus release..." />
    <echo message="---------------------------------" />
    <fixcrlf srcdir="${project.binDir}" eol="unix" includes="**/*.sh,**/*.init.d" />
    <tar destfile="${project.distributionName}-${sapia.build.release.no}-linux.tar.gz" compression="gzip" longfile="gnu">
      <!-- ./ -->
      <tarfileset dir="${basedir}" mode="664" dirmode="775">
        <include name="*.txt"/>
        <include name="*.license"/>
      </tarfileset>
      <!-- ./bin -->
      <tarfileset dir="${basedir}/bin" prefix="bin" mode="775" dirmode="775">
        <include name="*.sh"/>
        <include name="wrapper"/>
        <include name="corus.init.d"/>
        <exclude name="**/CVS/**/*.*"/>
      </tarfileset>
      <!-- ./config -->
      <tarfileset dir="${basedir}/config" prefix="config" mode="664" dirmode="775">
        <exclude name="**/CVS/**/*.*"/>
      </tarfileset>
      <!-- ./etc -->
      <tarfileset dir="${basedir}/etc" prefix="etc" mode="664" dirmode="775">
         <exclude name="**/CVS/**/*.*"/>
      </tarfileset>
      <!-- ./dist -->
      <tarfileset dir="${basedir}/dist" prefix="dist" mode="664" dirmode="775">
         <include name="${project.distributionName}.jar"/>
      </tarfileset>
      <!-- ./lib -->
      <tarfileset dir="${basedir}/lib" prefix="lib" mode="664" dirmode="775">
        <include name="**/*.jar"/>
      </tarfileset>
      <!-- ./vm-boot-lib -->
      <tarfileset dir="${basedir}/vm-boot-lib" prefix="vm-boot-lib" mode="664" dirmode="775">
        <include name="**/*.jar" />
      </tarfileset>      
      <!-- ./magnetlib -->
      <tarfileset dir="${basedir}/magnetlib" prefix="magnetlib" mode="664" dirmode="775">
        <include name="**/*.jar" />
      </tarfileset>
      <!-- ./extra-lib -->
      <tarfileset dir="${basedir}/extra-lib" prefix="extra-lib" mode="664" dirmode="775">
        <include name="*.jar" />
        <include name="*.so" />
      </tarfileset>
      <!-- ./site -->
      <tarfileset dir="${basedir}/site" prefix="site" mode="664" dirmode="775">
        <include name="**/html/**/*.*"/>
      </tarfileset>      
    </tar>
    
  </target>

  <!-- Default target -->
  <target name="build" depends="init, clean-classes, get-libs, compile, test" />
  <target name="current" depends="build, site">
    <antcall target="dist">
      <param name="sapia.build.release.no" value="0.0" />
    </antcall>
  </target>
  
  <!-- ========================= NETBEANS ========================== -->
  
   <target name="compile-selected-files">
    <fail unless="files">Must set property 'files'</fail>
    <mkdir dir="${project.classesDir}"/>
    <javac srcdir="${project.sourceDir}" destdir="${project.classesDir}" includes="${files}">
      <classpath refid="lib-classpath"/>
    </javac>
  </target>
  
  <target name="run-selected-files" depends="compile" description="Run Single File">
    <fail unless="classname">Must set property 'classname'</fail>
    <java classname="${classname}" fork="true" dir=".">
      <classpath>
        <fileset dir="${project.libraryDir}">
          <include name="**/*.jar" />
        </fileset>      
        <pathelement location="${project.classesDir}"/>      
      </classpath>
    </java>
  </target>  
  
  <target name="run-selected-tests" depends="compile" description="Run Single Test">
    <fail unless="classname">Must select some files in the IDE or set test.includes</fail>
    <!--java classname="${classname}">
      <classpath>
        <fileset dir="${project.libraryDir}">
          <include name="**/*.jar" />
        </fileset>      
        <pathelement location="${project.classesDir}"/>      
      </classpath>
    </java-->
    <junit fork="yes" dir="${basedir}">
        <classpath>
            <path refid="test-classpath" />
        </classpath>
        <formatter type="plain" usefile="false"/>
        <formatter type="xml"/>
        <test name="${classname}Test" haltonfailure="yes" todir="${project.testResultDir}" />
    </junit>      
  </target>
  
  <target name="debug-selected-files" depends="compile" if="netbeans.home">
    <fail unless="classname">Must set property 'classname'</fail>
    <nbjpdastart name="${classname}" addressproperty="jpda.address" transport="dt_socket">
      <classpath>
        <fileset dir="${project.libraryDir}">
          <include name="**/*.jar" />
        </fileset>      
        <pathelement location="${project.classesDir}"/>      
      </classpath>
      <sourcepath>
        <pathelement location="${project.sourceDir}/" />
      </sourcepath>
    </nbjpdastart>
    <java classname="${classname}" fork="true">
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xnoagent"/>
      <jvmarg value="-Djava.compiler=none"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
      <classpath>
        <fileset dir="${project.libraryDir}">
          <include name="**/*.jar" />
        </fileset>      
        <pathelement location="${project.classesDir}"/>      
      </classpath>
    </java>
  </target>                
  
  
  <target name="debug-selected-tests" depends="compile" description="Run Single Test">
    <fail unless="classname">Must select some files in the IDE or set test.includes</fail>
    <nbjpdastart name="${classname}Test" addressproperty="jpda.address" transport="dt_socket">
      <classpath>
        <fileset dir="${project.libraryDir}">
          <include name="**/*.jar" />
        </fileset>      
        <pathelement location="${project.classesDir}"/>      
      </classpath>
      <sourcepath>
        <pathelement location="${project.sourceDir}/" />
        <pathelement location="${project.testDir}/" />        
      </sourcepath>      
    </nbjpdastart>    
    <junit fork="yes" dir="${basedir}">
        <jvmarg value="-Xdebug"/>
        <jvmarg value="-Xnoagent"/>
        <jvmarg value="-Djava.compiler=none"/>
        <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>    
        <classpath>
            <path refid="test-classpath" />
        </classpath>
        <formatter type="plain" usefile="false"/>
        <formatter type="xml"/>
        <test name="${classname}Test" haltonfailure="yes" todir="${project.testResultDir}" />
    </junit>      
  </target>      
  
</project>
