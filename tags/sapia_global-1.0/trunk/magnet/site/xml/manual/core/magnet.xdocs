<sapia:page title="core:magnet" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform" cssPath="../../css/sapia.css">
  <sapia:sect1 title="core:magnet">
    <sapia:section>
      <sapia:path name="home" href="../../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="magnet" href="../../home.html" />
      <sapia:path name="manual" href="../home.html#Core%20Elements" />
    </sapia:section>
    <toc />
        
    <sapia:sect2 title="Overview">
			<p>The <sapia:command>&lt;magnet&gt;</sapia:command> element is the root element of a
			magnet definition file. We can set a name to the magnet file and we can associate a
			brief description. Note however that these two attributes are not used by Magnet ; they
			only provide some sort of documentation information to the programmers.
			</p>
	
	    <p>One interesting feature of the magnet element is the extension mechanism that allow
	    a given magnet definition file to extend another magnet file; somewhat like inheritance.
	    A Magnet can only extend a single parent at a time. In such a scenario the child magnets
	    can access all the parameters and values defined by the parent Magnet and all the Launchers
	    (of the inheritance tree) are executed starting by the root Magnet.
	    </p>
    </sapia:sect2>

    <sapia:sect2 title="Attributes">
      <p>The following list the xml attributes of the magnet element:
      </p>
      <sapia:table>
        <sapia:th>Name</sapia:th>
        <sapia:th>Description</sapia:th>
        <sapia:th>Required</sapia:th>
        <sapia:th>Interpolation</sapia:th>
        <tr>
          <td>name</td>
          <td>The unique name of this magnet definition file. The system does not required
          the name to be unique but as a rule, it keeps thing simpler if we do that.</td>
          <td>no</td>
          <td>yes</td>
        </tr>
        <tr>
          <td>description</td>
          <td>The description of this magnet definition file ; purpose, what it does, usage, ...</td>
          <td>no</td>
          <td>no</td>
        </tr>
        <tr>
          <td>extend</td>
          <td><p>The name of the resource that this magnet definition file extends. The name of
          the resource can be an absolute file name or a relative file to the directory defined
          by the Java <sapia:command>user.dir</sapia:command> system property. The resource
          can also be a URL of protocol <sapia:command>file://</sapia:command> or
          <sapia:command>http://</sapia:command>.</p></td>
          <td>no</td>
          <td>no</td>
        </tr>
      </sapia:table>
    </sapia:sect2>

    <sapia:sect2 title="Child Elements">
      <p>The following list the possible child xml elements that can hold the magnet element:
      </p>
      <sapia:table>
        <sapia:th>Name</sapia:th>
        <sapia:th>Cardinality</sapia:th>
        <sapia:th>Description</sapia:th>
        <tr>
          <td><a href="./protocolHandlerDef.html" target="main">protocolHandlerDef</a></td>
          <td>0 or *</td>
          <td>Extension point in magnet to plugin your own protocols to resolve and load resources.
          By default Magnet handles file:// and http:// protocols.</td>
        </tr>
        <tr>
          <td><a href="./scriptHandlerDef.html" target="main">scriptHandlerDef</a></td>
          <td>0 or *</td>
          <td>Extension point in magnet to plugin your own scripting engine. Magnet comes with
          <a href="http://www.beanshell.org/" target="external">Beanshell</a> with allows you to
          embed simple Java insctuctions.</td>
        </tr>
        <tr>
          <td><a href="./launcherHandlerDef.html" target="main">launchHandlerDef</a></td>
          <td>0 or *</td>
          <td>Extension point in magnet to plugin your own class that launches applications. Magnet
          offers a java and a system launcher (to start system processes).</td>
        </tr>
        <tr>
          <td><a href="./script.html" target="main">script</a></td>
          <td>0 or *</td>
          <td>A magnet can contains various script elements to perform intialization tasks. At runtime
          magnet will render and execute the script that matches the execution profile. If no script is
          provided for the profile and a script exists for the default, it will be executed. Only one
          script by profile can exists within a magnet.</td>
        </tr>
        <tr>
          <td><a href="./parameters.html" target="main">parameters</a></td>
          <td>0 or *</td>
          <td>To define global parameters within the magnet. Parameters can be specified for a given
          profile or for all profiles (called the default profile).</td>
        </tr>
        <tr>
          <td><a href="./others.html" target="main">others</a></td>
          <td>0 or *</td>
          <td>TO BE COMPLETED....</td>
        </tr>
      </sapia:table>
    </sapia:sect2>

    <sapia:sect2 title="Rendering Operations">
      <p>When a <sapia:command>&lt;Magnet&gt;</sapia:command> element is rendered, it performs the following
      operations in order:
        <ol>
          <li>Renders the parameters of the <i>default</i> profile.</li>
          <li>Renders the parameters of the specified profile at execution.</li>
          <li>Resolve the name attribute (with variable interpolation).</li>
          <li>Renders the handlers definitions, if any.</li>
          <li>Renders the script of the specified profile. If none is found it renders the
          script for the <i>default</i> profile, if any.</li>
          <li>Renders all the other generic objects of the object graph.</li>
          <li>Renders all the launchers.</li>
        </ol>
      </p>
    </sapia:sect2>

    <sapia:sect2 title="Examples">
      <p>This first example is a very basic Magnet definition with a name and
      a description.</p>
<sapia:code><![CDATA[
<magnet xmlns="http://schemas.sapia-oss.org/magnet/core/"
        name="MagnetExample1"
        description="This is a simple example.">
...
</magnet>]]></sapia:code>

      <p>The following example shows a Magnet definition that extends another
      Magnet definition file called <sapia:command>C:\magnet\main.xml</sapia:command>
      </p>
<sapia:code><![CDATA[
<magnet xmlns="http://schemas.sapia-oss.org/magnet/core/"
        name="MagnetExample2"
        description="This is an extend example."
        extend="C:\magnet\main.xml">
...
</magnet>]]></sapia:code>

      <p>The third example shows a Magnet definition that extends a
      resource called <sapia:command>http://www.mycorp.com/magnet/main.xml</sapia:command>
      </p>
<sapia:code><![CDATA[
<magnet xmlns="http://schemas.sapia-oss.org/magnet/core/"
        name="MagnetExample3"
        description="This is another extens example."
        extends="http://www.mycorp.com/magnet/main.xml">
...
</magnet>]]></sapia:code>
    </sapia:sect2>
  </sapia:sect1>
</sapia:page>