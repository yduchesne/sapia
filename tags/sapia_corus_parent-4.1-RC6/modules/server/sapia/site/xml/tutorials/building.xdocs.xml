<sapia:page title="Building from Source" cssPath="../css/sapia.css"
  xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">

  <head>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js"></script>
    <link rel="stylesheet" href="../css/corus.css" type="text/css"/>
    <link rel="stylesheet" type="text/css" href="../shadowbox-3.0.3/shadowbox.css" />
    <script type="text/javascript" src="../shadowbox-3.0.3/shadowbox.js"></script>
    <script type="text/javascript">
    Shadowbox.init();
    </script>
  </head>

  <sapia:vmenu>
    <sapia:vsection name="Corus Home" href="../index.html"/>
    <sapia:vsection name="Tutorials" href="index.html"/>
    <sapia:vsection name="Corus Guide" href="../CorusGuide.pdf"/>
  </sapia:vmenu>
  
  <sapia:sect1 title="Building from Source">
    <sapia:section>
      <sapia:path name="home" href="../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="corus"     href="../home.html" />
      <sapia:path name="learning"  href="../learning.html" />
      <sapia:path name="tutorials" href="index.html"/>
      <sapia:path name="building from source" />
    </sapia:section>
    
    <sapia:sect-desc>
      <p>
        The prerequisite to the other tutorials is to build the Corus sample 
        applications from the source. This sections shows you how.
      </p>
    </sapia:sect-desc>
    
    <toc/>    
    
    <sapia:sect2 title="Checkout and Build">
      <p>
        The Corus source code is structured according to the following diagram:
      </p>
      
      <center><img src="img/project-structure.png" /></center>
      
      <p>
        The source code can be checked out anonymously from the Subversion 
        repository <a target="google_code" href="http://code.google.com/p/sapia/source/checkout">at Google</a>,
        and built with Maven.
      </p>
      
      <p>
        If you browse the Subversion repository, you'll see that there are many 
        Sapia projects that are kept following Subversion's conventions, and Corus
        is one of them:
      </p>
      <ul>
        <li><tt>trunk</tt>: where the main branches of the different projects is kept 
            (each Sapia project has its own subfolder under the trunk).
        </li>
        <li><tt>tags</tt>: where the releases (generated by the Maven release plugin) 
             are created.
        </li>
        <li><tt>branches</tt>: where the development branches are created (each Sapia 
             project has its own subfolder under “branches”).
        </li>
      </ul>
      
      <p>
        The folders under “tags” are created by the Maven release plugin, which 
        uses a combination of the artifact ID and version for the subfolder's 
        name. Each such subfolder therefore corresponds to a specific project 
        release.
      </p>
      <p>
        For the purpose of the tutorials, you should checkout Corus from
        under the "tags" folder, picking the Corus release that corresponds
        to the one you've <a href="../install.html">installed</a> on your 
        computer.
      </p>
      <p>
      Before building, it is important to note that Corus depends on other 
      Sapia projects. We initially started using the Java.net repository to 
      deploy the Sapia artifacts, but have switched to having our own since. In any
      case, make sure that you have both configured in your Maven settings 
      (<sapia:command>settings.xml</sapia:command>) - for “normal” 
      dependencies as well as for plugins. Here's an example:
      </p>
      <sapia:code><![CDATA[
...

<repositories>
  <repository>
    <id>java.net-m2-repository</id>
    <name>Java.net Repository for Maven</name>
    <url>http://download.java.net/maven/2/</url>
  </repository>    
  <repository>
    <id>sapia-m2-repository</id>
    <name>Sapia Repository for Maven</name>
    <url>http://www.sapia-oss.org/maven2</url>
  </repository> 
</repositories>

...

<pluginRepositories>
  <pluginRepository>
    <id>java.net-m2-repository</id>
    <name>Java.net Repository for Maven</name>
    <url>http://download.java.net/maven/2/</url>
  </pluginRepository>
  <pluginRepository>
    <id>sapia-m2-repository</id>
    <name>Sapia Repository for Maven</name>
    <url>http://www.sapia-oss.org/maven2</url>
  </pluginRepository>
</pluginRepositories>

...
]]>
      </sapia:code>
      
      <p>
        To build, just cd into the directory where you've done the checkout, 
        and type: <sapia:command>mvn install</sapia:command>.
      </p>
      
      <sapia:note>
      The Corus server's distributions (which come in the form of zip and tar archives) 
      are generated under the <sapia:command>modules/server/target</sapia:command> 
      directory (more precisely, under the “target” directory of the server module).
      </sapia:note>
     
    </sapia:sect2>
    
    <sapia:sect2 title="The Sample Applications" alias="samples_structure">
      <p>
        In the diagram below, we're showing that there are two applications
        under the "samples" folder:
      </p>

      <center><img src="img/samples-structure.png" /></center>
      
      <ul>
        <li><sapia:command>corus_sample_grails_app</sapia:command> is a very
        limited web application built with Grails.</li>
        <li><sapia:command>corus_sample_jetty</sapia:command> is an embedded
        Jetty server packaged as a standalone Java application into which the 
        above Grails app is deployed.</li>
      </ul>
      
      <p>
        It is that Jetty server that we'll deploy into Corus in the course of 
        the other tutorials. When the time comes, you'll just need to cd under 
        the <sapia:command>corus_sample_jetty</sapia:command> folder and start 
        the Corus CLI from there.        
      </p>

    </sapia:sect2>
    
    <sapia:sect2 title="Next">
      <p>
        Now that you've built Corus and the need sample apps, it's time to
        <a href="webapp.html">move on to the next tutorial</a>. 
      </p>
    </sapia:sect2>
    
  </sapia:sect1>
</sapia:page>
