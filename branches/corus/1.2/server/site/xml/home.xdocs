<sapia:page title="Corus" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">
  <sapia:refreshMenu page="leftmenu.html" />
  <sapia:sect1 title="Corus">
    <sapia:section>
      <sapia:path name="home" href="../../home.html" />
      <sapia:path name="projects" />
    </sapia:section>
    <toc/>
    <sapia:sect2 title="Overview">
      <p>Corus is a framework allowing centralized control of distributed 
      application processes. Concretely, Corus allows distributing applications
      on different nodes (grouped by domain or cluster) and executing/terminating processes
      corresponding to these applications. As of now, Corus supports clustered
      execution and termination of Java virtual machines.</p>
    </sapia:sect2>
    
    <sapia:sect2 title="Features">
      <p>At a glance, Corus presents the following features</p>
      <ul>
        <li>non-intrusive distribution of plain-vanilla Java apps built with your 
        lightweight framework of choice (distributed apps without an app server);</li>
        <li>clustered application deployment on distributed Corus nodes (hosts);</li>
        <li>clustered execution of distributed processes;</li>
        <li>clustered administration of Corus nodes;</li>
        <li>clustered JNDI naming service and RMI-like distributed computing (based
         on Sapia's <a target="ubik" href="http://www.sapia-oss.org/projects/ubik/index.html">Ubik</a>), supporting transparent fail-over,
        load-balancing and client-side discovery;</li>
        <li>monitoring of executing processes and auto-restart of crashed ones;</li>        
        <li>command-line administration client emulating Unix commands, used to
        administrate applications and running processes;</li>        
        <li>port management;</li>
        <li>process scheduling.</li>
      </ul>    
    </sapia:sect2>
    
    <sapia:sect2 title="Architecture">
      <p>Corus consists of a lightweight daemon implemented in Java. A Corus
      server is installed on a given host, and executes/monitors processes
      on that host.</p>
      
      <p>Multiple Corus daemons are grouped by domain, which allows performing
      clustered application deployment and process execution. A command-line
      client is provided in order to control multiple Corus daemons remotely,
      in a centralized manner.</p>
      
      <p>A typical Corus topology is illustrated below:</p>
      <img src="Topology.jpg" width="550" height="475"/>
    </sapia:sect2>
    
    <sapia:sect2 title="Purpose">
      <p>The main goal behind Corus is to allow distribution of plain-vanilla
      Java apps (with a simple <sapia:command>main()</sapia:command> method as an entry point)
      on a large-scale without the intrusion of an app server and
      compliance with a heavy-weight programming model.</p>
      
      <p>The rationale behind Corus is that one should not need to rely on application
      servers (and the bloat that comes with them) to distribute applications on
      a large scale. How about just taking your plain Java app and deploy multiple instances
      of it in a cluster, making its services available on the network to other applications?
      </p>
      
      <p>In theory, that could be done by simply writing a shell script for your app and
      deploy that script and your application's resources on the required hosts. But
      in theory, that is hardly practicable in enterprise contexts, where application instances
      can be numerous and manual startup/shutdown of processes through shell scripts quickly becomes 
      overwhelming. That is why application servers generally rely on remote management and clustered deployment
      for distributing applications. But application servers impose a strict programming model,
      and the ones with enterprise-grade clustering features usually come with quite a price tag.</p>
      
      <p>Corus allows avoiding the app server programming model. With Corus, you can stick to the 
      basic, lightweight Java application. For example:</p>
      <ul>
        <li>you can build your app with your lightweight framework of choice.</li>
        <li>you can test your app locally withouth thinking about a distributed container contract.</li>
        <li>you can eventually deploy and execute your application on multiple nodes, in a centralized
        manner.</li>
        <li>you can use Corus' built-in distributed computing capabilities and/or other communication
        means of your choice (JMS, JavaSpace, etc.) to enable network links between your 
        distributed applications.</li>
      </ul>

    </sapia:sect2>
    
    <sapia:sect2 title="More Details">
       <p>Corus complements the lightweight philosophy very well, by not imposing a specific
       type of container in order to distribute your apps, and by keeping as close as possible
       to "normal", standalone, plain application execution. For exhaustive documentation,
       download the <a href="corus.pdf">Corus Guide</a>.</p>
    </sapia:sect2>
  </sapia:sect1>
</sapia:page>