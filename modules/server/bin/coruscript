#! /bin/sh

# Look for JAVA HOME environment variables
if [ -z "${JAVA_HOME}${JAVA_HOME_OVERRIDE}" ] ; then
    echo "ERROR: The variable JAVA_HOME is not defined; cannot start."
    echo "       Please set your JAVA_HOME environment variable or use the -javahome parameter."
    exit 1
fi

# Look for CORUS HOME environment
if [ -z "${CORUS_HOME}" ] ; then
    echo "ERROR: The variable CORUS_HOME is not defined; cannot start."
    echo "       Please set your CORUS_HOME environment variable."
    exit 1
fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false;
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  Darwin*) darwin=true ;;
  MINGW*) mingw=true ;;
esac


# For Cygwin and Mingw, ensure paths are in UNIX format before
# anything is touched
if $cygwin ; then
  [ -n "${CORUS_HOME}" ] &&
    CORUS_HOME=`cygpath --unix "${CORUS_HOME}"`
  [ -n "${JAVA_HOME_OVERRIDE}" ] &&
    JAVA_HOME_OVERRIDE=`cygpath --unix "${JAVA_HOME_OVERRIDE}"`
  [ -n "${JAVA_HOME}" ] &&
    JAVA_HOME=`cygpath --unix "${JAVA_HOME}"`
fi
if $mingw ; then
  [ -n "${CORUS_HOME}" ] &&
    CORUS_HOME="`(cd "${CORUS_HOME}"; pwd)`"
  [ -n "${JAVA_HOME_OVERRIDE}" ] &&
    JAVA_HOME_OVERRIDE="`(cd "${JAVA_HOME_OVERRIDE}"; pwd)`"
  [ -n "${JAVA_HOME}" ] &&
    JAVA_HOME="`(cd "${JAVA_HOME}"; pwd)`"
fi


if [ -n "${JAVA_HOME_OVERRIDE}" ] ; then
    # IBM's JDK on AIX uses strange locations for the executables
    if [ -x "${JAVA_HOME_OVERRIDE}/jre/sh/java" ] ; then
      JAVACMD="${JAVA_HOME_OVERRIDE}/jre/sh/java"
    elif [ -x "${JAVA_HOME_OVERRIDE}/jre/bin/java" ] ; then
      JAVACMD="${JAVA_HOME_OVERRIDE}/jre/bin/java"
    else
      JAVACMD="${JAVA_HOME_OVERRIDE}/bin/java"
    fi
else
    # IBM's JDK on AIX uses strange locations for the executables
    if [ -x "${JAVA_HOME}/jre/sh/java" ] ; then
      JAVACMD="${JAVA_HOME}/jre/sh/java"
    elif [ -x "${JAVA_HOME}/jre/bin/java" ] ; then
      JAVACMD="${JAVA_HOME}/jre/bin/java"
    else
      JAVACMD="${JAVA_HOME}/bin/java"
    fi
fi

if [ ! -x "${JAVACMD}" ] ; then
    echo "Error: JAVA_HOME is not defined correctly."
    echo "  We cannot execute ${JAVACMD}"
    exit 1
fi

MAINCLASS=org.sapia.corus.client.cli.CorusScript
CORUS_CLASSPATH=""
for JAR in ${CORUS_HOME}/lib/server/*.jar
do
    # if the directory is empty, then it will return the input string
    # this is stupid, so case for it
    if [ "${JAR}" != "${CORUS_HOME}/lib/server/*.jar" ] ; then
        if [ -z "${CORUS_CLASSPATH}" ] ; then
            CORUS_CLASSPATH=${JAR}
        else
            CORUS_CLASSPATH="${JAR}":${CORUS_CLASSPATH}
        fi
    fi
done


# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
    JAVA_HOME=`cygpath --path --windows "${JAVA_HOME}"`
    JAVA_HOME_OVERRIDE=`cygpath --path --windows "${JAVA_HOME_OVERRIDE}"`
    CORUS_CLASSPATH=`cygpath --path --windows "${CORUS_CLASSPATH}"`
fi
# For Cygwin, switch paths to appropriate format before running java
# For PATHs convert to unix format first, then to windows format to ensure
# both formats are supported. Probably this will fail on directories with ;
# in the name in the path. Let's assume that paths containing ; are more
# rare than windows style paths on cygwin.
if $cygwin; then
  if [ "$OS" = "Windows_NT" ] && cygpath -m .>/dev/null 2>/dev/null ; then
    format=mixed
  else
    format=windows
  fi
  [ -n "${CORUS_HOME}" ] && CORUS_HOME=`cygpath --path --$format "${CORUS_HOME}"`
  [ -n "${JAVA_HOME}" ] && JAVA_HOME=`cygpath --path --$format "${JAVA_HOME}"`
  [ -n "${JAVA_HOME_OVERRIDE}" ] && JAVA_HOME_OVERRIDE=`cygpath --path --$format "${JAVA_HOME_OVERRIDE}"`
  CORUS_CLASSPATH=`cygpath --path --$format "${CORUS_CLASSPATH}"`
  CYGHOME=`cygpath --$format "$HOME"`
fi

# add a second backslash to variables terminated by a backslash under cygwin
if $cygwin; then
  case "${CORUS_HOME}" in
    *\\ )
    CORUS_HOME="${CORUS_HOME}\\"
    ;;
  esac
  case "${CYGHOME}" in
    *\\ )
    CYGHOME="${CYGHOME}\\"
    ;;
  esac
  case "${CORUS_CLASSPATH}" in
    *\\ )
    CORUS_CLASSPATH="${CORUS_CLASSPATH}\\"
    ;;
  esac
fi

# Execute ant using eval/exec to preserve spaces in paths,
# java options, and ant args
java_sys_opts=
if [ -n "$CYGHOME" ]; then
  java_sys_opts="-Dcygwin.user.home=\"$CYGHOME\""
fi

java_exec_command="exec \"${JAVACMD}\" -cp \"${CORUS_CLASSPATH}\" -Dcorus.home=\"${CORUS_HOME}\" $java_sys_opts ${MAINCLASS} \"$@\""
#echo $java_exec_command
eval $java_exec_command
